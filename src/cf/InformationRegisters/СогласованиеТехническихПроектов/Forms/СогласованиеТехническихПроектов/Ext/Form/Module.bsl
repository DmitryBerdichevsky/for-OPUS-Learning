#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонтрольнаяДата = ТекущаяДата();
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("КонтрольнаяДата", КонтрольнаяДата);
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("Действие", СписокДействий, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоДействию();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("СрокОтработки", СписокСроков, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСрокуОтработки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("Действие",
			"СписокДействий",
			СписокДействий,
			СтруктураБыстрогоОтбора,
			Настройки) Тогда
			
		УстановитьОтборПоДействию();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("СрокОтработки",
			"СписокСроков",
			СписокСроков,
			СтруктураБыстрогоОтбора,
			Настройки) Тогда
			
		УстановитьОтборПоСрокуОтработки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПроверкаДаты", 36000);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СогласованиеТехническогоПроекта" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокДействийПриИзменении(Элемент)
	
	УстановитьОтборПоДействию();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокДействий);
	
	ОткрытьФорму("РегистрСведений.СогласованиеТехническихПроектов.Форма.ВыборДействияПоСогласованию", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокДействий = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСроковПриИзменении(Элемент)
	
	УстановитьОтборПоСрокуОтработки();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСроковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСроков);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСроковОтработки", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСроковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСроков = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Элементы.Список.ТекущиеДанные.ТехническийПроект);
	ОткрытьФорму("Справочник.ТехническиеПроекты.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусНеГотовоКСогласованию(Команда)
	
	УстановитьСтатусСогласования(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияТехническихПроектов.НеГотовоКСогласованию"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусГотовоКСогласованию(Команда)
	
	УстановитьСтатусСогласования(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласовано(Команда)
	
	УстановитьСтатусСогласования(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияТехническихПроектов.Согласовано"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеСогласовано(Команда)
	
	УстановитьСтатусСогласования(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияТехническихПроектов.НеСогласовано"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСтатусСогласования(Статус)
	
	ОчиститьСообщения();
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru='Не выбраны строки списка для указания статуса согласования'");
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
		МассивДанных.Добавить(Строка);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", Статус);
	СтруктураПараметров.Вставить("МассивДанных", МассивДанных);
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()=1 Тогда
		СтруктураПараметров.Вставить("ТехническийПроект", Элементы.Список.ТекущиеДанные.ТехническийПроект);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаСтатусаСогласованияЗавершение", ЭтотОбъект, СтруктураПараметров);
	
	ОткрытьФорму("РегистрСведений.СогласованиеТехническихПроектов.Форма.УстановкаСтатусаСогласования",
				 СтруктураПараметров,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения);
				 
	
КонецПроцедуры
			 
&НаКлиенте
Процедура УстановкаСтатусаСогласованияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		УстановитьСтатусСогласованияСервер(ДополнительныеПараметры.Статус, ДополнительныеПараметры.МассивДанных, РезультатЗакрытия);
		
		ТекстОповещения = НСтр("ru='Выполнена установка статуса согласования %Статус%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Статус%", ДополнительныеПараметры.Статус);
		
		
		Если ДополнительныеПараметры.Свойство("ТехническийПроект") Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДополнительныеПараметры.ТехническийПроект);
		Иначе
			НавигационнаяСсылка = Неопределено;
		КонецЕсли;
		
		ЗаголовокОповещения = НСтр("ru='Согласование технических проектов'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, НавигационнаяСсылка, ТекстОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусСогласованияСервер(Статус, МассивКлючей, Комментарий)
	
	МассивТехническихПроектов = Новый Массив;
	
	ТаблицаКлючейНесогласованныхТочек = Новый ТаблицаЗначений;
	ТаблицаКлючейНесогласованныхТочек.Колонки.Добавить("ТехническийПроект");
	ТаблицаКлючейНесогласованныхТочек.Колонки.Добавить("КлючСтрокиКонтрольнойТочки");
	
	Для Каждого КлючЗаписи из МассивКлючей Цикл
		
		Если МассивТехническихПроектов.Найти(КлючЗаписи.ТехническийПроект)=Неопределено Тогда
			МассивТехническихПроектов.Добавить(КлючЗаписи.ТехническийПроект);
		КонецЕсли;
		
		Если Статус<>Перечисления.СтатусыСогласованияТехническихПроектов.Согласовано Тогда
			НоваяСтрока = ТаблицаКлючейНесогласованныхТочек.Добавить();
			НоваяСтрока.ТехническийПроект = КлючЗаписи.ТехническийПроект;
			НоваяСтрока.КлючСтрокиКонтрольнойТочки = КлючЗаписи.КлючСтрокиКонтрольнойТочки;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.СогласованиеТехническихПроектов.СоздатьМенеджерЗаписи();
		
		ДатаУстановки = ТекущаяДата();
		
		МенеджерЗаписи.Период = ДатаУстановки;
		МенеджерЗаписи.ТехническийПроект = КлючЗаписи.ТехническийПроект;
		МенеджерЗаписи.Согласующий = КлючЗаписи.Согласующий;
		МенеджерЗаписи.РольСогласующего = КлючЗаписи.РольСогласующего;
		МенеджерЗаписи.КлючСтрокиКонтрольнойТочки = КлючЗаписи.КлючСтрокиКонтрольнойТочки;
		МенеджерЗаписи.СтатусСогласования = Статус;
		МенеджерЗаписи.Установил = ТекущийПользователь;
		МенеджерЗаписи.Комментарий = Комментарий;
		
		Если Статус = Перечисления.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию Тогда
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючЗаписи.ТехническийПроект, "Владелец");
			МенеджерЗаписи.СрокОтработкиПоручения = ОбщегоНазначенияСППР.СрокОтработкиПоручения(ДатаУстановки, Проект);
		Иначе
			МенеджерЗаписи.СрокОтработкиПоручения = '00010101';
		КонецЕсли;
		
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
		
	Для Каждого ТехническийПроект из МассивТехническихПроектов Цикл
		
		МассивКлючейСтрок = Новый Массив;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ТехническийПроект", ТехническийПроект);
		МассивСтрок = ТаблицаКлючейНесогласованныхТочек.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаТаблицы из МассивСтрок Цикл
			МассивКлючейСтрок.Добавить(СтрокаТаблицы.КлючСтрокиКонтрольнойТочки);
		КонецЦикла;
		
		ЗаписатьТехническийПроект(ТехническийПроект, МассивКлючейСтрок, Статус);
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТехническийПроект(ТехническийПроект, МассивКлючейСтрок, Статус)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТехническийПроектОбъект = ТехническийПроект.ПолучитьОбъект();
	
	Попытка
		ТехническийПроектОбъект.Заблокировать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Попытка
		
		Если Статус<>Перечисления.СтатусыТехническихПроектов.Отменен
			И МассивКлючейСтрок.Количество()>0 Тогда
			
			ТехническийПроектОбъект.ДополнительныеСвойства.Вставить("ВыполнятьОткатКонтрольнойТочки", Истина);
			ТехническийПроектОбъект.ДополнительныеСвойства.Вставить("МассивКлючейНесогласованныхТочек", МассивКлючейСтрок);
			
		КонецЕсли;
		
		ТехническийПроектОбъект.Записать();
		ТехническийПроектОбъект.Разблокировать();
	Исключение
	КонецПопытки;

КонецПроцедуры
	
&НаКлиенте
Процедура ПроверкаДаты()
	
	ПроверитьАктуализироватьКонтрольнуюДату();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАктуализироватьКонтрольнуюДату()
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	Если ТекущаяДата > КонтрольнаяДата Тогда
		Список.Параметры.УстановитьЗначениеПараметра("КонтрольнаяДата", КонтрольнаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДействию()
	
	ОтборСогласовать = (СписокДействий.НайтиПоЗначению("Согласовать") <> Неопределено);
	ОтборПодготовитьКСогласованию = (СписокДействий.НайтиПоЗначению("Подготовить к согласованию") <> Неопределено);
	
	ГруппаИЛИПоДействию =
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
																	"Отбор по действию",
																	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ГруппаИСогласовать =
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИПоДействию,
																	"Отбор по действию согласовать",
																	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	ГруппаИЛИПодготовитьКСогласованию =
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИПоДействию,
																	"Отбор по действию подготовить к согласованию",
																	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);

	ГруппаИПодготовитьНовое =
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИПодготовитьКСогласованию,
																	"Отбор по действию подготовить к согласованию новое",
																	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ГруппаИПодготовитьНесогласованное =
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИПодготовитьКСогласованию,
																	"Отбор по действию подготовить к согласованию несогласованное",
																	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
																	
    ГруппаИЛИПоДействию.Использование = ОтборСогласовать ИЛИ ОтборПодготовитьКСогласованию;
	ГруппаИСогласовать.Использование = ОтборСогласовать;
	ГруппаИЛИПодготовитьКСогласованию.Использование = ОтборПодготовитьКСогласованию;
	ГруппаИПодготовитьНовое.Использование = ОтборПодготовитьКСогласованию;
	ГруппаИПодготовитьНесогласованное.Использование = ОтборПодготовитьКСогласованию;
																	
	СписокСтатусовТехническихПроектов = Новый СписокЗначений;
	СписокСтатусовТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.НеЗапланирован);
	СписокСтатусовТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.Запланирован);
	СписокСтатусовТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.Активен);
	
	СтатусКТПропущена = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Пропущена;
	СтатусКТНазначена = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Назначена;
	
	// Согласовать
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСогласовать, "СтатусКонтрольнойТочки", ВидСравненияКомпоновкиДанных.НеРавно, СтатусКТПропущена,,ОтборСогласовать);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСогласовать, "СтатусТехническогоПроекта", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовТехническихПроектов,,ОтборСогласовать);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСогласовать, "СтатусСогласования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию,,ОтборСогласовать);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСогласовать, "Согласующий", ВидСравненияКомпоновкиДанных.Равно, ТекущийПользователь,,ОтборСогласовать);
	
	// Подготовить к согласованию несогласованное
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНесогласованное, "СтатусКонтрольнойТочки", ВидСравненияКомпоновкиДанных.НеРавно, СтатусКТПропущена,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНесогласованное, "СтатусТехническогоПроекта", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовТехническихПроектов,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНесогласованное, "СтатусСогласования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыСогласованияТехническихПроектов.НеСогласовано,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНесогласованное, "Ответственный", ВидСравненияКомпоновкиДанных.Равно, ТекущийПользователь,,ОтборПодготовитьКСогласованию);
	
	// Подготовить к согласованию новое
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНовое, "КонтрольнаяТочкаЯвляетсяПредстоящей", ВидСравненияКомпоновкиДанных.Равно, Истина,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНовое, "СтатусКонтрольнойТочки", ВидСравненияКомпоновкиДанных.Равно, СтатусКТНазначена,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНовое, "СтатусТехническогоПроекта", ВидСравненияКомпоновкиДанных.Равно, перечисления.СтатусыТехническихПроектов.Активен,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНовое, "СтатусСогласования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыСогласованияТехническихПроектов.НеГотовоКСогласованию,,ОтборПодготовитьКСогласованию);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПодготовитьНовое, "Ответственный", ВидСравненияКомпоновкиДанных.Равно, ТекущийПользователь,,ОтборПодготовитьКСогласованию);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСрокуОтработки()
	
	ТекущаяДата = КонтрольнаяДата;
	
	ДатаЗавтра = ОбщегоНазначенияСППР.СледующаяДатаПоОсновномуКалендарю();
	
	ГруппаИЛИСрокОбщая = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
																			"Отбор по сроку отработки",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
																			
	ГруппаИЛИПрочее = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИСрокОбщая,
																			"Отбор по сроку отработки прочих действий",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
																			
	ГруппаИЛИПоручения = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИСрокОбщая,
																			"Отбор по сроку отработки поручений",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
																			
	ГруппаИПрочееСегодня = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИПрочее,
																			"Отбор по сроку отработки прочих действий на сегодня",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
																			
	ГруппаИПорученияСегодня = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИПоручения,
																			"Отбор по сроку отработки поручений на сегодня",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ЕстьОтборПоВчера	= (СписокСроков.НайтиПоЗначению("Вчера") <> Неопределено);
	ЕстьОтборПоСегодня	= (СписокСроков.НайтиПоЗначению("Сегодня") <> Неопределено);
	ЕстьОтборПоЗавтра	= (СписокСроков.НайтиПоЗначению("Завтра") <> Неопределено);
	ЕстьОтборПоПотом	= (СписокСроков.НайтиПоЗначению("Потом") <> Неопределено);
	
	ЕстьОтборПоПоручениям = (СписокДействий.НайтиПоЗначению("Согласовать") <> Неопределено);
	ЕстьОтборПоПрочимДействиям = (СписокДействий.НайтиПоЗначению("Подготовить к согласованию") <> Неопределено);
	
	ГруппаИЛИСрокОбщая.Использование = (ЕстьОтборПоВчера ИЛИ ЕстьОтборПоСегодня ИЛИ ЕстьОтборПоЗавтра ИЛИ ЕстьОтборПоПотом)
										И (ЕстьОтборПоПоручениям ИЛИ ЕстьОтборПоПрочимДействиям ИЛИ СписокДействий.Количество() = 0);
										
	ГруппаИЛИПоручения.Использование = (ЕстьОтборПоВчера ИЛИ ЕстьОтборПоСегодня ИЛИ ЕстьОтборПоЗавтра ИЛИ ЕстьОтборПоПотом)
										И (ЕстьОтборПоПоручениям ИЛИ СписокДействий.Количество() = 0);
										
	ГруппаИЛИПрочее.Использование = (ЕстьОтборПоВчера ИЛИ ЕстьОтборПоСегодня ИЛИ ЕстьОтборПоЗавтра ИЛИ ЕстьОтборПоПотом)
										И (ЕстьОтборПоПрочимДействиям ИЛИ СписокДействий.Количество() = 0);
										
	ГруппаИПрочееСегодня.Использование = ЕстьОтборПоСегодня И (ЕстьОтборПоПрочимДействиям ИЛИ СписокДействий.Количество() = 0);
	ГруппаИПорученияСегодня.Использование = ЕстьОтборПоСегодня И (ЕстьОтборПоПоручениям ИЛИ СписокДействий.Количество() = 0);
	
	ЕстьОтборПоСроку = ЕстьОтборПоПрочимДействиям ИЛИ СписокДействий.Количество() = 0;
	ЕстьОтборПоСрокуПоручения = ЕстьОтборПоПоручениям ИЛИ СписокДействий.Количество() = 0;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИПрочее, "СрокОтработки", ВидСравненияКомпоновкиДанных.Меньше, ТекущаяДата,,ЕстьОтборПоВчера И ЕстьОтборПоСроку);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПрочееСегодня, "СрокОтработки", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ТекущаяДата,,ЕстьОтборПоСегодня И ЕстьОтборПоСроку);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПрочееСегодня, "СрокОтработки", ВидСравненияКомпоновкиДанных.Меньше, ДатаЗавтра,,ЕстьОтборПоСегодня И ЕстьОтборПоСроку);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИПрочее, "СрокОтработки", ВидСравненияКомпоновкиДанных.Равно, ДатаЗавтра,,ЕстьОтборПоЗавтра И ЕстьОтборПоСроку);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИПрочее, "СрокОтработки", ВидСравненияКомпоновкиДанных.Больше, ДатаЗавтра,,ЕстьОтборПоПотом И ЕстьОтборПоСроку);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИПоручения, "СрокОтработкиПоручения", ВидСравненияКомпоновкиДанных.Меньше, ТекущаяДата,,ЕстьОтборПоВчера И ЕстьОтборПоСрокуПоручения);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПорученияСегодня, "СрокОтработкиПоручения", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ТекущаяДата,,ЕстьОтборПоСегодня И ЕстьОтборПоСрокуПоручения);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПорученияСегодня, "СрокОтработкиПоручения", ВидСравненияКомпоновкиДанных.Меньше, ДатаЗавтра,,ЕстьОтборПоСегодня И ЕстьОтборПоСрокуПоручения);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИПоручения, "СрокОтработкиПоручения", ВидСравненияКомпоновкиДанных.Равно, ДатаЗавтра,,ЕстьОтборПоЗавтра И ЕстьОтборПоСрокуПоручения);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИПоручения, "СрокОтработкиПоручения", ВидСравненияКомпоновкиДанных.Больше, ДатаЗавтра,,ЕстьОтборПоПотом И ЕстьОтборПоСрокуПоручения);
	
КонецПроцедуры

#КонецОбласти