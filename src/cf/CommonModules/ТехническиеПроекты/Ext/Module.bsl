#Область ПрограммныйИнтерфейс

//Возвращает таблицу, содержащую списиок контрольных точек по умолчанию
Функция СоставКонтрольныхТочекТехническогоПроектаПоУмолчанию(Проект) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольныеТочкиТехническихПроектов.Ссылка КАК КонтрольнаяТочка
	|ИЗ
	|	Справочник.КонтрольныеТочкиТехническихПроектов КАК КонтрольныеТочкиТехническихПроектов
	|ГДЕ
	|	НЕ КонтрольныеТочкиТехническихПроектов.ПометкаУдаления
	|	И КонтрольныеТочкиТехническихПроектов.Используется
	|	И КонтрольныеТочкиТехническихПроектов.Владелец = &Проект
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрольныеТочкиТехническихПроектов.Код"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

// Возвращает таблицу значений, содержащую данные о согласующих
// технических проектов в контрольных точках
//
// Параметры:
//  КонтрольныеТочки - массим, содержащий согласуемые контрольные точки
//
// Возвращаемое значение:
//  Таблица значений, содержащая данные о согласующих
//
Функция СогласующиеКонтрольныхТочек(КонтрольныеТочки) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольныеТочкиТехническихПроектовШаблонСогласования.Согласующий КАК Согласующий,
	|	КонтрольныеТочкиТехническихПроектовШаблонСогласования.РольСогласующего КАК РольСогласующего,
	|	КонтрольныеТочкиТехническихПроектовШаблонСогласования.Ссылка КАК КонтрольнаяТочка
	|ИЗ
	|	Справочник.КонтрольныеТочкиТехническихПроектов.ШаблонСогласования КАК КонтрольныеТочкиТехническихПроектовШаблонСогласования
	|ГДЕ
	|	КонтрольныеТочкиТехническихПроектовШаблонСогласования.Ссылка В(&КонтрольныеТочки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрольнаяТочка,
	|	КонтрольныеТочкиТехническихПроектовШаблонСогласования.НомерСтроки"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонтрольныеТочки", КонтрольныеТочки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Устанавливает указанный статус для указанных технических проектов
//
// Параметры:
//  МассивТехническихПроектов - массив, содержащий технический проекты
//  Статус - статус, который необходимо установить проектам
//
Процедура УстановитьСтатусТехническихПроектов(МассивТехническихПроектов, Статус) Экспорт
	
	Для Каждого ТехническийПроект из МассивТехническихПроектов Цикл
		
		Объект = ТехническийПроект.ПолучитьОбъект();
		Попытка
			Объект.Заблокировать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось установить статус для технического проекта: %Проект% по причине: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ТехническийПроект);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ERRORDESC]", ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТехническийПроект);
		КонецПопытки;
		
		Попытка
			Объект.Статус = Статус;
			
			Если НЕ Объект.ПроверитьЗаполнение() Тогда
				ТекстСообщения = НСтр("ru='Технический проект %Проект% не записан'"); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ТехническийПроект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТехническийПроект);
				Возврат;
			КонецЕсли;
		
			Объект.Записать();
			Объект.Разблокировать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось установить статус для технического проекта: %Проект% по причине: %ОписаниеОшибки%'"); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ТехническийПроект);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТехническийПроект);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Текст с описанием тезнического проекта для закладки в хранилище
//
// Параметры:
//  ТехническийПроект - СправочникСсылка.ТехническийПроект - Технический проект
// 
// Возвращаемое значение:
//   - Строка - Текст с описанием
//
Функция ТекстДляХранилищаКонфигурации(ТехническийПроект) Экспорт
	
	ИменаРеквизитов = "Код, Наименование, Ответственный, Публикуется, ХранилищеОписания";
	Реквизиты = Новый Структура(ИменаРеквизитов);
	Реквизиты.Вставить("ИспользоватьСлеши", "Владелец.ИспользоватьСлешиВТекстеЗакладкиВХранилище");
	
	КоллекцияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТехническийПроект, Реквизиты);
	
	Префикс              = ?(КоллекцияРеквизитов.ИспользоватьСлеши, "//", "");
	ПрефиксПриПубликации = ?(КоллекцияРеквизитов.Публикуется, "", Префикс);
	
	Текст = ПрефиксПриПубликации + НСтр("ru='Технический проект'") + " " + КоллекцияРеквизитов.Код + Символы.ПС
		+ Символы.ПС + ПрефиксПриПубликации + НСтр("ru='Наименование:'") + " " + КоллекцияРеквизитов.Наименование
		+ Символы.ПС + Префикс + НСтр("ru='Ответственный:'") + " " + КоллекцияРеквизитов.Ответственный;
	
	Если КоллекцияРеквизитов.Публикуется Тогда
		
		Описание = КоллекцияРеквизитов.ХранилищеОписания.Получить();
		ТекстОписания = "";
				
		Если ТипЗнч(Описание) = Тип("ФорматированныйДокумент") Тогда
			ТекстОписания = Описание.ПолучитьТекст();
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекстОписания) Тогда
			Текст = Текст + Символы.ПС + ПрефиксПриПубликации + "Описание: " + Символы.ПС + ТекстОписания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Процедура ДобавитьВопросыВТехническиеПроекты(МассивВопросов, МассивТехническихПроектов) Экспорт
	
	Если МассивТехническихПроектов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтветов = ТаблицаОтветовНаВопросыТехническихПроектов(МассивВопросов, МассивТехническихПроектов);
	
	Для Каждого Вопрос из МассивВопросов Цикл
		
		Для Каждого ТехническийПроект из МассивТехническихПроектов Цикл
			
			Если Вопрос.Проект <> ТехническийПроект.Владелец Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.РезультатыОтветовНаВопросыТехническихПроектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Вопрос.Установить(Вопрос, Истина);
			НаборЗаписей.Отбор.ТехническийПроект.Установить(ТехническийПроект, Истина);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			
			ЗаписьНабора.Вопрос = Вопрос;
			ЗаписьНабора.ТехническийПроект = ТехническийПроект;
				
			ОписаниеТипов = Новый ОписаниеТипов(Вопрос.ТипЗначения);
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Вопрос", Вопрос);
			СтруктураОтбора.Вставить("ТехническийПроект", ТехническийПроект);
			
			МассивСтрокТаблицыОтветов = ТаблицаОтветов.НайтиСтроки(СтруктураОтбора);
			
			Если МассивСтрокТаблицыОтветов.Количество() = 0 Тогда
				ЗаписьНабора.Ответ = ОписаниеТипов.ПривестиЗначение(ЗаписьНабора.Ответ);
			Иначе
				ЗаписьНабора.Ответ = ОписаниеТипов.ПривестиЗначение(МассивСтрокТаблицыОтветов[0].Ответ);
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПересчитатьСрокиИДлительностьКонтрольныхТочекСервер(СтрокаКонтрольнойТочки, ИзмененныеДанные, ТехническийПроект) Экспорт
	
	ИспользуемыйКалендарь = Константы.ОсновнойКалендарь.Получить();
	
	ПредыдущийСрок = '00010101';
	ИмеютсяНепропущенныеТочки = Ложь;
	
	Для Каждого СтрокаТЧ из ТехническийПроект.КонтрольныеТочки Цикл
		
		Если ИмеютсяНепропущенныеТочки Тогда
			НачальныйСрок = ПредыдущийСрок;
		Иначе
			НачальныйСрок = ТехническийПроект.ПлановаяДатаНачала;
		КонецЕсли;
		
		Если СтрокаТЧ = СтрокаКонтрольнойТочки Тогда
			
			Если ИзмененныеДанные = "Длительность" Тогда
				РассчитатьСрокПрохожденияТочки(СтрокаТЧ, НачальныйСрок, ИспользуемыйКалендарь);
			Иначе
				РассчитатьДлительностьТочки(СтрокаТЧ, НачальныйСрок, ИспользуемыйКалендарь);
			КонецЕсли;
			
		ИначеЕсли СтрокаКонтрольнойТочки = Неопределено
			ИЛИ (СтрокаКонтрольнойТочки <> Неопределено И СтрокаТЧ.НомерСтроки > СтрокаКонтрольнойТочки.НомерСтроки) Тогда
			
			Если ИзмененныеДанные = "Длительность" Тогда
				РассчитатьСрокПрохожденияТочки(СтрокаТЧ, НачальныйСрок, ИспользуемыйКалендарь);
			Иначе
				Если НачальныйСрок >= СтрокаТЧ.СрокПрохождения Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.СрокПрохождения) Тогда
						СтрокаТЧ.СрокПрохождения = НачальныйСрок;
						СтрокаТЧ.Длительность = 0;
					КонецЕсли;
				Иначе
					РассчитатьДлительностьТочки(СтрокаТЧ, НачальныйСрок, ИспользуемыйКалендарь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СрокПрохождения) Тогда
			ПредыдущийСрок = СтрокаТЧ.СрокПрохождения;
		КонецЕсли;
		
		Если СтрокаТЧ.Статус <> Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Пропущена Тогда
			ИмеютсяНепропущенныеТочки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстОписанияПроектаИзХранилищаОписания(ХранилищеОписания) Экспорт
	
	Описание = "";
	
	Если ТипЗнч(ХранилищеОписания) = Тип("ХранилищеЗначения") Тогда
		
		ФорматированноеОписание = ХранилищеОписания.Получить();
		Если ТипЗнч(ФорматированноеОписание) = Тип("ФорматированныйДокумент") Тогда
			Описание = ФорматированноеОписание.ПолучитьТекст();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Сохраняет настройки технического проекта в хранилище общих настроек
//
// Параметры:
//  ТехническийПроект	 - СправочникСсылка.ТехническийПроект - Технический проект для которого сохраняются настройки
//  ЗначенияНастроек	 - Структура - Содержит значения настроек, которые нужно сохранить
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБТехпроекта
//					* ПользовательИБТехпроекта
//					* ПользовательХранилищаТехпроекта
//					* ПарольХранилищаТехпроекта
//
Функция СохранитьНастройкиТехническогоПроекта(ТехническийПроект, ЗначенияНастроек) Экспорт
	
	НастройкиПроекта = ПолучитьНастройкиТехническогоПроекта(ТехническийПроект);
	ЗаполнитьЗначенияСвойств(НастройкиПроекта, ЗначенияНастроек);
	
	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиТехническихПроектов", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
	КонецЕсли;
	ТекущиеНастройки.Вставить(ТехническийПроект, НастройкиПроекта);
	ХранилищеОбщихНастроек.Сохранить("НастройкиТехническихПроектов", "Версия1", ТекущиеНастройки);
	
КонецФункции

// Возвращает настройки технического проекта
//
// Параметры:
//  ТехническийПроект	 - СправочникСсылка.ТехническийПроект - Технический проект для которого нужно получить настройки
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБТехпроекта
//					* ПользовательИБТехпроекта
//					* ПользовательХранилищаТехпроекта
//					* ПарольХранилищаТехпроекта
//
Функция ПолучитьНастройкиТехническогоПроекта(ТехническийПроект) Экспорт

	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиТехническихПроектов", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
		НастройкиПроекта = Неопределено;
	Иначе
		НастройкиПроекта = ТекущиеНастройки.Получить(ТехническийПроект);
	КонецЕсли;
	
	Если НастройкиПроекта = Неопределено Тогда
		НастройкиПроекта = СтруктураНастроекПроекта();
		ТекущиеНастройки.Вставить(ТехническийПроект, НастройкиПроекта);
	КонецЕсли; 
	
	Возврат ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НастройкиПроекта);

КонецФункции

// Возвращает структуру настроек проекта
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБТехпроекта
//					* ПользовательИБТехпроекта
//					* ПользовательХранилищаТехпроекта
//					* ПарольХранилищаТехпроекта
//
Функция СтруктураНастроекПроекта() Экспорт

	НастройкиПроекта = Новый Структура;
	НастройкиПроекта.Вставить("РасположениеИБТехпроекта", "");
	НастройкиПроекта.Вставить("ПользовательИБТехпроекта", "");
	НастройкиПроекта.Вставить("ПользовательХранилищаТехпроекта", "");
	НастройкиПроекта.Вставить("ПарольХранилищаТехпроекта", "");

	Возврат НастройкиПроекта;
	
КонецФункции
 
// Сохраняет настройки версии в хранилище общих настроек
//
// Параметры:
//  Версия			 - СправочникСсылка.ВерсииПроекта - Версия для которой нужно сохранить настройки
//  ЗначенияНастроек - Структура - Содержит значения настроек, которые нужно сохранить
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//  * РасположениеИБОсновногоХранилища
//  * ПользовательИБОсновногоХранилища
//  * ПользовательОсновногоХранилища
//  * ПарольОсновногоХранилища
//
Функция СохранитьНастройкиВерсии(Версия, ЗначенияНастроек) Экспорт

	НастройкиВерсии = ПолучитьНастройкиВерсии(Версия);
	ЗаполнитьЗначенияСвойств(НастройкиВерсии, ЗначенияНастроек);
	
	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиВерсий", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
	КонецЕсли;
	ТекущиеНастройки.Вставить(Версия, НастройкиВерсии);
	ХранилищеОбщихНастроек.Сохранить("НастройкиВерсий", "Версия1", ТекущиеНастройки);

КонецФункции

// Возвращает настройки версии
//
// Параметры:
//  Версия	 - СправочникСсылка.ВерсииПроекта - Версия для которой нужно получить настройки
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБОсновногоХранилища
//					* ПользовательИБОсновногоХранилища
//					* ПользовательОсновногоХранилища
//					* ПарольОсновногоХранилища
//
Функция ПолучитьНастройкиВерсии(Версия) Экспорт

	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиВерсий", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
		НастройкиВерсии = Неопределено;
	Иначе
		НастройкиВерсии = ТекущиеНастройки.Получить(Версия);
	КонецЕсли;
	
	Если НастройкиВерсии = Неопределено Тогда
		НастройкиВерсии = СтруктураНастроекиВерсии();
		ТекущиеНастройки.Вставить(Версия, НастройкиВерсии);
	КонецЕсли; 
	
	Возврат НастройкиВерсии;

КонецФункции

// Возвращает структуру настроек версии
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБОсновногоХранилища
//					* ПользовательИБОсновногоХранилища
//					* ПользовательОсновногоХранилища
//					* ПарольОсновногоХранилища
//
Функция СтруктураНастроекиВерсии() Экспорт

	НастройкиВерсии = Новый Структура;
	НастройкиВерсии.Вставить("РасположениеИБОсновногоХранилища", "");
	НастройкиВерсии.Вставить("ПользовательИБОсновногоХранилища", "");
	НастройкиВерсии.Вставить("ПользовательОсновногоХранилища", "");
	НастройкиВерсии.Вставить("ПарольОсновногоХранилища", "");

	Возврат НастройкиВерсии;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьДлительностьТочки(СтрокаКонтрольнойТочки, ПредыдущийСрок, ИспользуемыйКалендарь)
	
	Если ЗначениеЗаполнено(СтрокаКонтрольнойТочки.СрокПрохождения) Тогда
		
		Если НачалоДня(СтрокаКонтрольнойТочки.СрокПрохождения) = НачалоДня(ПредыдущийСрок) Тогда
			СтрокаКонтрольнойТочки.Длительность = 0;
			Возврат;
		ИначеЕсли НачалоДня(СтрокаКонтрольнойТочки.СрокПрохождения) = НачалоДня(ПредыдущийСрок + 86400) Тогда
			СтрокаКонтрольнойТочки.Длительность = 1;
			Возврат;
		КонецЕсли; 
		
		ДлительностьПоКалендарю = Неопределено;
		
		Если ЗначениеЗаполнено(ИспользуемыйКалендарь) И ЗначениеЗаполнено(ПредыдущийСрок) Тогда
			ДлительностьПоКалендарю = КалендарныеГрафики.РазностьДатПоКалендарю(ИспользуемыйКалендарь,
											НачалоДня(ПредыдущийСрок+86400),
											НачалоДня(СтрокаКонтрольнойТочки.СрокПрохождения),
											Ложь);
			
		КонецЕсли;
		
		Если ДлительностьПоКалендарю = Неопределено Тогда
			// Если календарь не указан, или не заполнен
			СтрокаКонтрольнойТочки.Длительность = (НачалоДня(СтрокаКонтрольнойТочки.СрокПрохождения) - НачалоДня(ПредыдущийСрок))/86400;
		Иначе
			//Длительность определяется с учетом календаря
			СтрокаКонтрольнойТочки.Длительность = ДлительностьПоКалендарю;
		КонецЕсли;
		
	Иначе
	    СтрокаКонтрольнойТочки.Длительность = 99;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСрокПрохожденияТочки(СтрокаКонтрольнойТочки, ПредыдущийСрок, ИспользуемыйКалендарь)
	
	Если СтрокаКонтрольнойТочки.Статус <> Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Назначена Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийСрок) И (СтрокаКонтрольнойТочки.Длительность<>99) Тогда
		
		ДатаПоКалендарю = Неопределено;
		
		Если ЗначениеЗаполнено(ИспользуемыйКалендарь) Тогда
			ДатаПоКалендарю = КалендарныеГрафики.ДатаПоКалендарю(ИспользуемыйКалендарь, ПредыдущийСрок, СтрокаКонтрольнойТочки.Длительность, Ложь);
		КонецЕсли;
		
		Если ДатаПоКалендарю = Неопределено Тогда
			СтрокаКонтрольнойТочки.СрокПрохождения = НачалоДня(ПредыдущийСрок) + СтрокаКонтрольнойТочки.Длительность*86400;
		Иначе
			СтрокаКонтрольнойТочки.СрокПрохождения = ДатаПоКалендарю;
		КонецЕсли;
	
	ИначеЕсли СтрокаКонтрольнойТочки.Длительность = 99 Тогда
	    СтрокаКонтрольнойТочки.СрокПрохождения = '00010101';
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаОтветовНаВопросыТехническихПроектов(МассивВопросов, МассивТехническихПроектов)
	
	Проект = ПараметрыСеанса.ТекущийПроект;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыОтветовНаВопросыТехническихПроектов.Вопрос,
	|	РезультатыОтветовНаВопросыТехническихПроектов.ТехническийПроект,
	|	РезультатыОтветовНаВопросыТехническихПроектов.Вопрос.КонтрольнаяТочкаТехническогоПроекта,
	|	РезультатыОтветовНаВопросыТехническихПроектов.Ответ
	|ИЗ
	|	РегистрСведений.РезультатыОтветовНаВопросыТехническихПроектов КАК РезультатыОтветовНаВопросыТехническихПроектов
	|ГДЕ
	|	РезультатыОтветовНаВопросыТехническихПроектов.ТехническийПроект.Владелец = &Проект
	|	И РезультатыОтветовНаВопросыТехническихПроектов.Вопрос В (&МассивВопросов)
	|	И РезультатыОтветовНаВопросыТехническихПроектов.ТехническийПроект В (&МассивТехническихПроектов)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("МассивВопросов", МассивВопросов);
	Запрос.УстановитьПараметр("МассивТехническихПроектов", МассивТехническихПроектов);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти