////////////////////////////////////////////////////////////////////////////////
// Общие процедуры для работы с ошибками
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет формирование сообщения по ошибкам, требующим отработки (просроченным, либо со
// сроком исполнения сегодня).
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - проект, в рамках которого требуется
//                                      формировать сообщения по ошибкам
//  Параметры - см. ПараметрыФормированияСОобщенийПоОшибкам
//
Процедура СформироватьСообщенияПоОшибкам(Проект, Параметры = Неопределено) Экспорт 
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыФормированияСОобщенийПоОшибкам(Проект);
	КонецЕсли;
	
	ВыполнитьФормированиеСообщенийПоОшибкам(Параметры);
	
КонецПроцедуры

// Выполняет формирование сообщения по указанной ошибке, требующей отработки.
//
// Параметры:
//  Ошибка - СправочникСсылка.Ошибки - ошибка, требующая отработки.
//  СрокОтработки - Дата - срок отработки ошибки.
//  Комунаправлена - СправочникСсылка.Пользователи - пользователь, которому направлена ошибка.
//  АвторСообщения- СправочникСсылка.Пользователи - пользователь, от лица которого формируется сообщение.
//
Процедура СформироватьСообщениеПоОшибке(Ошибка, СрокОтработки, КомуНаправлена, АвторСообщения) Экспорт
	
	ДатаСегодня = НачалоДня(ТекущаяДата());
	
	ЗаголовокОбсуждения = НСтр("ru='Необходимо отработать ошибку'");
	
	ТекстСообщения = ТекстСообшенияПоОтработкеОшибкиДляОбсуждения(СрокОтработки);
	
	Если СрокОтработки < ДатаСегодня Тогда
		// Для просроченных ошибок необходимо проверить, не было ли ранее сформировано
		// сообщение. Если сообщение имеется- новое генерировать не требуется.
		
		ИмеющиесяСообщения = РаботаССистемойВзаимодействия.СообщенияПоОбъекту(Ошибка,
		                                 КомуНаправлена,
										 АвторСообщения,
										 ЗаголовокОбсуждения,
										 СрокОтработки);
		
		Если ИмеющиесяСообщения.Количество()>0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(Ошибка,
	                                     КомуНаправлена,
										 АвторСообщения,
										 ЗаголовокОбсуждения,
										 ТекстСообщения);
										 
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОшибокОжидающихИсправленияПовторяемых;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ОтслеживатьСостояниеПовторяемыхОшибок;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;

КонецПроцедуры

// Выполняет обработку ошибок, которые ожидают исправления повторяемых ошибок.
Процедура ОбработатьОшибкиОжидающиеИсправленияПовторяемых() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ОтслеживатьСостояниеПовторяемыхОшибок") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.Рассмотрел КАК Рассмотрел,
	|	Ошибки.Зарегистрировал КАК Зарегистрировал,
	|	Ошибки.Владелец КАК Проект,
	|	ПовторяемыеОшибки.Проверена КАК ПовторяемаяОшибкаПроверена,
	|	ПовторяемыеОшибки.Отозвана КАК ПовторяемаяОшибкаОтозвана,
	|	ПовторяемыеОшибки.Владелец КАК ПроектПовторяемойОшибки,
	|	ПовторяемыеОшибки.Код КАК КодПовторяемойОшибки
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК ПовторяемыеОшибки
	|		ПО Ошибки.ПовторяемаяОшибка = ПовторяемыеОшибки.Ссылка
	|			И (ПовторяемыеОшибки.Проверена
	|				ИЛИ ПовторяемыеОшибки.Отозвана)
	|ГДЕ
	|	НЕ Ошибки.ПометкаУдаления
	|	И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ОшибкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОшибкаОбъект.Заблокировать();
			
			ТекстПоручения = "";
			
			Если Выборка.ПовторяемаяОшибкаПроверена Тогда
				// Следует перенести исправление повторяемой ошибки, либо отозвать
				
				Если Выборка.Проект = Выборка.ПроектПовторяемойОшибки Тогда
					
					ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана;
					ОшибкаОбъект.КомуНаправлена = Выборка.Зарегистрировал;
					ОШибкаОбъект.ПричиныНепризнания = НСтр("ru='Повторяемая ошибка исправлена'");
					
					ТекстПоручения = НСтр("ru='Повторяемая ошибка исправлена. Данную ошибку следует отозвать'");
					
				Иначе
					ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Признана;
					
					Если ЗначениеЗаполнено(Выборка.Рассмотрел) Тогда
						ОшибкаОбъект.КомуНаправлена = Выборка.Рассмотрел;
					Иначе
						ОшибкаОбъект.КомуНаправлена = Выборка.Зарегистрировал;
					КонецЕсли;
					
					ТекстПоручения = НСтр("ru='Повторяемая ошибка %ПовторяемаяОшибка% исправлена в проекте %ПроектПовторяемойОшибки%. Необходимо перенести исправление ошибки %ПовторяемаяОшибка% в проект %ПроектОшибки% и одновременно с этим отметить данную ошибку исправленной.'");
					ТекстПоручения = СтрЗаменить(ТекстПоручения, "%ПовторяемаяОшибка%", Выборка.КодПовторяемойОшибки);
					ТекстПоручения = СтрЗаменить(ТекстПоручения, "%ПроектПовторяемойОшибки%", Строка(Выборка.ПроектПовторяемойОшибки));
					ТекстПоручения = СтрЗаменить(ТекстПоручения, "%ПроектОшибки%", Строка(Выборка.Проект));
				КонецЕсли;
				
			ИначеЕсли Выборка.ПовторяемаяОшибкаОтозвана Тогда
				// Следует снова рассмотреть ошибку
				ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована;
				
				Если ЗначениеЗаполнено(Выборка.Рассмотрел) Тогда
					ОшибкаОбъект.КомуНаправлена = Выборка.Рассмотрел;
				Иначе
					ОшибкаОбъект.КомуНаправлена = Выборка.Зарегистрировал;
				КонецЕсли;
				
				ТекстПоручения = НСтр("ru='Повторяемая ошибка отозвана, поэтому следует вновь рассмотреть данную ошибку.'");
				
			КонецЕсли;
			
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(Пользователи.ТекущийПользователь(), ТекстПоручения);
			
			ОшибкаОбъект.Записать();
			ОшибкаОбъект.Разблокировать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка при обработке ошибки, ожидающей исправления повторяемой: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ИмяСобытия = НСтр("ru = 'Обработка ошибок, ожидающих исправления повторяемых'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыФормированияСообщенийПоОшибкам(Проект)

	ТипЗначения = ТипЗнч(Проект);
	
	Если ТипЗначения = Тип("СправочникСсылка.Проекты") Тогда
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "ПользовательАвторСообщенийПоОшибкам");
		Параметры.Вставить("Проект", Проект);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверно заданы параметры формирования сообщений по ошибкам.'");
	КонецЕсли; 
	
	Возврат Параметры;
	
КонецФункции

Процедура ВыполнитьФормированиеСообщенийПоОшибкам(Параметры)
	
	ДанныеОшибокДляОбработки = ОшибкиДляУведомлений(Параметры.Проект);
	
	Для Каждого ДанныеОшибокПоПользователю из ДанныеОшибокДляОбработки.Строки Цикл
		
		КоличествоОшибокПользователя = ДанныеОшибокПоПользователю.Строки.Количество();
		
		Если КоличествоОшибокПользователя > 5 Тогда
			// Если имеется более 5 ошибок к отработке, генерируется сводное сообщение.
			
			ТекстСообщения = ТекстСообшенияПоОтработкеОшибокДляОбсуждения();
			Действия = ДействияВСОобщенииОбОтработкеОшибок();
			
			РаботаССистемойВзаимодействия.ДобавитьНеконтекстноеСообщение(ДанныеОшибокПоПользователю.КомуНаправлена,
										 Параметры.ПользовательАвторСообщенийПоОшибкам,
										 ТекстСообщения,
										 Действия);
										 
			Продолжить;
			
		Иначе
			// Если ошибок менее 5- генерируются контекстные сообщения в каждой ошибке.
			
			Для Каждого ДанныеОшибки из ДанныеОшибокПоПользователю.Строки Цикл
				
				СформироватьСообщениеПоОшибке(ДанныеОшибки.Ошибка,
				                              ДанныеОшибки.СрокОтработки,
											  ДанныеОшибки.КомуНаправлена,
											  Параметры.ПользовательАвторСообщенийПоОшибкам);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
							   
КонецПроцедуры

Функция ТекстСообшенияПоОтработкеОшибокДляОбсуждения()
	
	ТекстСообщения = НСтр("ru='Имеются ошибки, срок отработки которых истек или истекает сегодня. Нужно отработать ошибки. Для изменения срока отработки следует обратиться к ответственному за проект, или другому полномочному пользователю.'");
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТекстСообшенияПоОтработкеОшибкиДляОбсуждения(СрокОтработкиОшибки)
	
	ДатаСегодня = НачалоДня(ТекущаяДата());
	
	Если СрокОтработкиОшибки < ДатаСегодня Тогда
		ТекстСообщения = НСтр("ru='Срок отработки истек. Нужно отработать ошибку. Для изменения срока отработки следует обратиться к ответственному за проект, или другому полномочному пользователю.'");
	Иначе
		ТекстСообщения = НСтр("ru='Срок отработки истекает сегодня. Нужно отработать ошибку. Для изменения срока отработки следует обратиться к ответственному за проект, или другому полномочному пользователю.'");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ОшибкиДляУведомлений(Проект)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ошибки.Ссылка КАК Ошибка,
	|	Ошибки.КомуНаправлена КАК КомуНаправлена,
	|	Ошибки.СрокОтработки КАК СрокОтработки,
	|	ВЫБОР
	|		КОГДА Ошибки.СрокОтработки < &ТекущаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочена
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.ПометкаУдаления
	|	И Ошибки.Владелец = &Проект
	|	И Ошибки.КомуНаправлена <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Ошибки.СрокОтработки < &ДатаЗавтра
	|	И Ошибки.СрокОтработки <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ(Ошибки.Обнаружена = ЗНАЧЕНИЕ(Перечисление.МестаОбнаруженияОшибок.ВВетке)
	|				И Ошибки.ВеткаОбнаружения.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта))
	|ИТОГИ ПО
	|	КомуНаправлена"
	;
	
	ТекущаяДата = НачалоДня(Текущаядата());
	ДатаЗавтра = ОбщегоНазначенияСППР.СледующаяДатаПоОсновномуКалендарю();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ДатаЗавтра", ДатаЗавтра);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ДействияВСообщенииОбОтработкеОшибок()
	
	Действия = Новый СписокЗначений;
	Действия.Добавить("ПерейтиКСпискуОшибок", НСтр("ru='Перейти к списку ошибок'"));
	
	Возврат Действия;
	
КонецФункции

#КонецОбласти