#Область СлужебныйПрограммныйИнтерфейс

// Заполняет представление периодов в списке выбора с учетом склонения в зависимости от количества периодов
//
// Параметры:
//  СписокВыбора        - СписокЗначений - список, содержащий периоды.
//  КоличествоПериодов  - Число - выбранное пользователем количество периодов
//
Процедура ЗаполнитьПредставлениеЗначенийСпискаВыбораПериодаВЗависимостиОтКоличестваПериодов(СписокВыбора, КоличествоПериодов) Экспорт
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Представление = ПредставлениеПеридичностиВЗависимостиОтКоличестваПериодов(ЭлементСписка.Значение, КоличествоПериодов);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет представление периода с учетом склонения в зависимости от количества периодов
//
// Параметры:
//  Периодичность       - ПеричислениеСсылка.ПериодичностьПланов - период, представление которого определяется.
//  КоличествоПериодов  - Число
//
Функция ПредставлениеПеридичностиВЗависимостиОтКоличестваПериодов(Периодичность, КоличествоПериодов)  Экспорт
	
	Представление = "";
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Год") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'год'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'года'");
		Иначе
			Представление = НСтр("ru = 'лет'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.День") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'день'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'дня'");
		Иначе
			Представление = НСтр("ru = 'дней'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Квартал") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'квартал'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'квартала'");
		Иначе
			Представление = НСтр("ru = 'кварталов'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Месяц") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'месяц'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'месяца'");
		Иначе
			Представление = НСтр("ru = 'месяцев'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Неделя") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'неделя'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'недели'");
		Иначе
			Представление = НСтр("ru = 'недель'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Ищет строку по значению в заданной колонке дерева
//
// Параметры:
//  ГдеИскать           - ДанныеФормыДерево, ДанныеФормыЭлементДерева - .
//  Колонка             - Строка
//  Значение            - Произвольный
//  ИскатьВПодчиненных  - Булево
//
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева, Неопределено
//
Функция НайденнаяСтрокаВДанныхФормыДерево(ГдеИскать,Колонка, Значение, ИскатьВПодчиненных) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева[Колонка] = Значение Тогда
			
			Возврат ЭлементДерева;
			
		ИначеЕсли ИскатьВПодчиненных Тогда
			
			НайденнаяСтрока = НайденнаяСтрокаВДанныхФормыДерево(ЭлементДерева, Колонка , Значение, ИскатьВПодчиненных);
			Если НайденнаяСтрока <> Неопределено Тогда
				Возврат НайденнаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Конструктор структуры, содержащей данные периода плана.
//
// Возвращаемое значение:
//   Структура - содержит:
//     * ДатаНачала    - Дата
//     * ДатаОкончания - Дата
//
Функция НовыйПериодПлана() Экспорт
	
	ПериодПлана = Новый Структура;
	ПериодПлана.Вставить("ДатаНачала", Дата(1,1,1));
	ПериодПлана.Вставить("ДатаОкончания", Дата(1,1,1));
	
	Возврат ПериодПлана;
	
КонецФункции

// Конструктор структуры, содержащей данные зап плана.
//
// Возвращаемое значение:
//   Структура - содержит:
//   * ИдентификаторПлана - Число
//   * Сотрудник          - СправочникСсылка.Пользователи
//   * Работа             - СправочникСсылка.ЗадачиПроцессов, СправочникСсылка.ТехническиеПроекты, СправочникСсылка.Ошибки, СправочникСсылка.ВидыДеятельности
//   * ПланируемыеТрудозатраты - Число
//   * Цель                    - Строка
//   * Достигнуто              - Строка
//   * Комментарий             - Строка
//   * ПеренестиВСледующийПлан - Булево
//   * Результат - Булево      - Перечисление.РезультатыВыполненияПланируемыхРабот
//
Функция НовыйДанныеЗаписиПлана() Экспорт
	
	ДанныеЗаписиПлана = Новый Структура;
	ДанныеЗаписиПлана.Вставить("ИдентификаторПлана",      0);
	ДанныеЗаписиПлана.Вставить("Сотрудник",               ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ДанныеЗаписиПлана.Вставить("Работа",                  Неопределено);
	ДанныеЗаписиПлана.Вставить("ТипСтрокиПлана",          ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.ПустаяСсылка"));
	ДанныеЗаписиПлана.Вставить("Группировка",             Неопределено);
	ДанныеЗаписиПлана.Вставить("ПланируемыеТрудозатраты", 0);
	ДанныеЗаписиПлана.Вставить("Цель",                    "");
	ДанныеЗаписиПлана.Вставить("Достигнуто",              "");
	ДанныеЗаписиПлана.Вставить("Комментарий",             "");
	ДанныеЗаписиПлана.Вставить("ПеренестиВСледующийПлан", Ложь);
	ДанныеЗаписиПлана.Вставить("Результат",               ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.ПустаяСсылка"));
	ДанныеЗаписиПлана.Вставить("Удалить",                 Ложь);
	
	Возврат ДанныеЗаписиПлана;
	
КонецФункции

// Формирует список плановых работы, по которым согласуются трудозатраты.
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СписокТиповРаботПоКоторымСогласуютсяТрудозатраты() Экспорт
	
	СписокТиповРабот = Новый СписокЗначений;
	СписокТиповРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	СписокТиповРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	
	Возврат СписокТиповРабот;
	
КонецФункции

// Формирует массив типов работ, у которых есть статусы и даты.
//
// Возвращаемое значение:
//   Массив
//
Функция ТипыРаботСоСтатусамиДатами() Экспорт
	
	МассивТиповРабот = Новый Массив;
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.Ошибки"));
	
	Возврат МассивТиповРабот;
	
КонецФункции

// Формирует список значений всех типов работ планирования.
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ВсеТипыРабот() Экспорт
	
	СписокРабот = Новый СписокЗначений;
	СписокРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	СписокРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	СписокРабот.Добавить(Тип("СправочникСсылка.Ошибки"));
	СписокРабот.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
	
	Возврат СписокРабот;
	
КонецФункции

// Переводит секунды в часы
//
// Параметры:
//  Секунды - Число - количество секунд.
//
// Возвращаемое значение:
//   Число
//
Функция ЧасыПоДлительностиВСекундах(Секунды) Экспорт
	
	Возврат Окр(Секунды / 3600, 1, РежимОкругления.Окр15как20);
	
КонецФункции

#КонецОбласти