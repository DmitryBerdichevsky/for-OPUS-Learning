
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет список выбора периодичности плана значениеми перечисления "Периодичность планов"
//
// Параметры:
//  СписокВыбора  - СписокЗначений - заполняемый список выбора
//
Процедура ЗаполнитьСписокВыбораПериодичностиПланов(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	МетаданныеПеречисления = Метаданные.Перечисления.ПериодичностьПланов;
	
	Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		
		ЭлементСписка = СписокВыбора.Добавить();
		
		ЭлементСписка.Значение      = Перечисления[МетаданныеПеречисления.Имя][ЗначениеПеречисления.Имя];
		ЭлементСписка.Представление = ЗначениеПеречисления.Синоним;
		
	КонецЦикла;
	
КонецПроцедуры

// Используется регламентным заданием по периодическому созданию планов для действующих видов планов.
//
Процедура ПериодическоеСозданиеПланов() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланирование") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеПланов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Справочники.ВидыПланов.СоздатьПланыПоВидуПланаЕслиНеобходимо(Выборка.Ссылка, НачалоДня(ТекущаяДатаСеанса()), 4);
	
	КонецЦикла;

КонецПроцедуры

// Используется фоновым заданим по получению данных фактически выполненных работ.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * ИдентификаторПлана    - Строка
//  * НачалоПериода         - Дата
//  * КонецПериода          - Дата
//  * НаименованиеВидаПлана - Строка
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеФактическиеВыполненныхРабот(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеФактическиВыполненныхРабот(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданим по получению данных остатков планируемых работ.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * ИдентификаторПлана                   - Строка
//  * ВидСогласуемогоРесурсаПлановыхРабот  - СправочникСсылка.ВидыСогласуемыхРесурсов
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеОстатковПланируемыхРабот(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеОстатковПланируемыхРабот(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданим по заполнению составляемых планов видами деятельности по статистике.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * НачалоПериода - Дата - начало периода составляемого плана.
//  * КонецПериода  - Дата - конец периода составляемого плана.
//  * Сотрудники  - Массив - сотрудники, для которых составляется план.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеВидовДеятельностиПоСтатистике(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеВидовДеятельностиПоСтатистике(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Выполняет запрос по получению данных состояния и плановой даты выполнения работ.
//
// Параметры:
//  МассивОшибок              - Массив
//  МассивЗадач               - Массив
//  МассивТехническихПроектов - Массив
//
// Возвращаемое значение:
//   РезультатЗапроса 
//
Функция РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов, МассивВеток = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеОшибок();
		
	КонецЕсли;
	
	Если МассивЗадач.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединить();
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеЗадач();
		
	КонецЕсли;
	
	Если МассивТехническихПроектов.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединить();
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеТехническихПроектов();
		
	КонецЕсли;
	
	Если МассивВеток <> Неопределено 
		И МассивВеток.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединить();
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеВеток();
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ошибки",             МассивОшибок);
	Запрос.УстановитьПараметр("ТехническиеПроекты", МассивТехническихПроектов);
	Запрос.УстановитьПараметр("Задачи",             МассивЗадач);
	Запрос.УстановитьПараметр("Ветки",              МассивВеток);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание         = Метаданные.РегламентныеЗадания.СозданиеПланов;
	Настройка.ФункциональнаяОпция         = Метаданные.ФункциональныеОпции.ИспользоватьПланирование;
	Настройка.ДоступноВПодчиненномУзлеРИБ = Ложь;
	
КонецПроцедуры

// Формирует массив статусов работ со сроком выполнения, которые не требуют дальнейшего внимания
//
// Возвращаемое значение:
//   Массив
//
Функция СтатусыНеактивыхРаботСоСрокомВыполнения() Экспорт
	
	МассивСтатусов = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, Перечисления.СтатусыОшибок.СтатусыНеТребуюющиеВнимания());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, Перечисления.СтатусыЗадачПроцессов.СтатусыНеТребуюющиеВнимания());
	
	Возврат МассивСтатусов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФактическиВыполненныеРаботы

Функция ПодготовленныеДанныеФактическиВыполненныхРабот(ПараметрыПодготовки)
	
	ДанныеДляПолучения = ПараметрыПодготовки.ДанныеДляПолученияВыполненныхРабот;
	НачалоПериода         = НачалоДня(ДанныеДляПолучения.НачалоПериода);
	КонецПериода          = КонецДня(ДанныеДляПолучения.КонецПериода);
	ИдентификаторПлана    = ДанныеДляПолучения.ИдентификаторПлана;
	РаботыСотрудников     = ДанныеДляПолучения.РаботыСотрудников;
	НаименованиеВидаПлана = ДанныеДляПолучения.НаименованиеВидаПлана;
	
	ДанныеРаботСотрудников = ДанныеРаботСотрудников(РаботыСотрудников);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеФактическиВыполненныхРабот();
	
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",          КонецПериода);
	Запрос.УстановитьПараметр("Сотрудники",            ДанныеРаботСотрудников.МассивСотрудников);
	Запрос.УстановитьПараметр("ЗапланированныеРаботы", ДанныеРаботСотрудников.ТаблицаРаботСотрудников);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеПлана = Новый Структура;
	ДанныеПлана.Вставить("НаименованиеВидаПлана", НаименованиеВидаПлана);
	ДанныеПлана.Вставить("НачалоПериода",         НачалоПериода);
	ДанныеПлана.Вставить("КонецПериода",          КонецПериода);
	
	ПодготовленныеДанные = РезультатПреобразованияДанныхЗапросаДанныхФактическиВыполненныхРабот(РезультатЗапроса[14],
	                                                                                            РезультатЗапроса[13],
	                                                                                            ДанныеПлана);
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция НовыйДанныеСотрудникаВыполненныеРаботы()
	
	ДанныеВыполненныеРаботы = Новый Структура;
	ДанныеВыполненныеРаботы.Вставить("Сотрудник",                    Справочники.Пользователи.ПустаяСсылка());
	ДанныеВыполненныеРаботы.Вставить("ПлановыеРаботы",               Новый Массив);
	ДанныеВыполненныеРаботы.Вставить("ПрочиеРаботы",            Новый Массив);
	ДанныеВыполненныеРаботы.Вставить("КоличествоВнеплановыхРабот",   0);
	ДанныеВыполненныеРаботы.Вставить("ДлительностьВнеплановыхРабот", 0);
	ДанныеВыполненныеРаботы.Вставить("ОтчетВнеплановыеРаботы",       Неопределено);
		
	Возврат ДанныеВыполненныеРаботы;
	
КонецФункции

Функция РезультатПреобразованияДанныхЗапросаДанныхФактическиВыполненныхРабот(ЗапланированныеРаботы, ПрочиеРаботы, ДанныеПлана)
	
	Результат = Новый Массив;
	
	ВыборкаПланСотрудники = ЗапланированныеРаботы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПланСотрудники.Следующий() Цикл
		
		ВыборкаПланРаботы = ВыборкаПланСотрудники.Выбрать();
		
		МассивРабот = Новый Массив;
		
		Пока ВыборкаПланРаботы.Следующий() Цикл
			
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("Работа",       ВыборкаПланРаботы.Работа);
			ДанныеРаботы.Вставить("Длительность", ВыборкаПланРаботы.Длительность);
			
			МассивРабот.Добавить(ДанныеРаботы);
			
		КонецЦикла;
		
		ДанныеСотрудникаПоРаботам = НовыйДанныеСотрудникаВыполненныеРаботы();
		ДанныеСотрудникаПоРаботам.Сотрудник      = ВыборкаПланСотрудники.Сотрудник;
		ДанныеСотрудникаПоРаботам.ПлановыеРаботы = МассивРабот;
		
		Результат.Добавить(ДанныеСотрудникаПоРаботам);
		
	КонецЦикла;
	
	ВыборкаВнеплановыеСотрудники = ПрочиеРаботы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВнеплановыеСотрудники.Следующий() Цикл
		
		ВыборкаВнеплановыеРаботы = ВыборкаВнеплановыеСотрудники.Выбрать();
		
		МассивРабот = Новый Массив;
		КоличествоВнеплановыхРабот   = 0;
		ДлительностьВнеплановыхРабот = 0;
		
		Пока ВыборкаВнеплановыеРаботы.Следующий() Цикл
			
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("ВидДеятельности",   ВыборкаВнеплановыеРаботы.ВидДеятельности);
			ДанныеРаботы.Вставить("ТехническийПроект", ВыборкаВнеплановыеРаботы.ТехническийПроект);
			ДанныеРаботы.Вставить("Ошибка",            ВыборкаВнеплановыеРаботы.Ошибка);
			ДанныеРаботы.Вставить("Задача",            ВыборкаВнеплановыеРаботы.Задача);
			ДанныеРаботы.Вставить("Длительность",      ВыборкаВнеплановыеРаботы.Длительность);
			
			МассивРабот.Добавить(ДанныеРаботы);
			
			КоличествоВнеплановыхРабот   = КоличествоВнеплановыхРабот + 1;
			ДлительностьВнеплановыхРабот = ДлительностьВнеплановыхРабот + ВыборкаВнеплановыеРаботы.Длительность;
			
		КонецЦикла;
		
		СотрудникНайден = Ложь;
		
		Для Каждого ЭлементМассива Из Результат Цикл
			
			Если ЭлементМассива.Сотрудник = ВыборкаВнеплановыеСотрудники.Пользователь Тогда
				
				ЭлементМассива.ПрочиеРаботы                 = МассивРабот;
				ЭлементМассива.КоличествоВнеплановыхРабот   = КоличествоВнеплановыхРабот;
				ЭлементМассива.ДлительностьВнеплановыхРабот = ЧасыПоДлительностиВСекундах(ДлительностьВнеплановыхРабот);
				ЭлементМассива.ОтчетВнеплановыеРаботы       = ПрочиеРаботыВФорматеMXL(ЭлементМассива.ПрочиеРаботы,
				                                                                      ЭлементМассива.Сотрудник,
				                                                                      ДанныеПлана,
				                                                                      ДлительностьВнеплановыхРабот);
				
				СотрудникНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СотрудникНайден Тогда
			
			ДанныеСотрудникаПоРаботам = НовыйДанныеСотрудникаВыполненныеРаботы();
			ДанныеСотрудникаПоРаботам.Сотрудник                    = ВыборкаВнеплановыеСотрудники.Пользователь;
			ДанныеСотрудникаПоРаботам.ПрочиеРаботы                 = МассивРабот;
			ДанныеСотрудникаПоРаботам.КоличествоВнеплановыхРабот   = КоличествоВнеплановыхРабот;
			ДанныеСотрудникаПоРаботам.ДлительностьВнеплановыхРабот = ЧасыПоДлительностиВСекундах(ДлительностьВнеплановыхРабот);
			ДанныеСотрудникаПоРаботам.ОтчетВнеплановыеРаботы       = ПрочиеРаботыВФорматеMXL(ДанныеСотрудникаПоРаботам.ПрочиеРаботы,
			                                                                                 ДанныеСотрудникаПоРаботам.Сотрудник, 
			                                                                                 ДанныеПлана,
			                                                                                 ДлительностьВнеплановыхРабот);
			
			Результат.Добавить(ДанныеСотрудникаПоРаботам);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработанныеДанныеДляПрочихРаботФорматеMXL(ПрочиеРаботы);
	
	ОбработанныеДанныеДляПрочихРаботФорматеMXL = НовыйОбработанныеДанныеДляПрочихРаботФорматеMXL();
	
	МассивОшибок              = Новый Массив;
	МассивЗадач               = Новый Массив;
	МассивТехническихПроектов = Новый Массив;
	
	Для Каждого СтрокаРабота Из ПрочиеРаботы Цикл
		
		Если ЗначениеЗаполнено(СтрокаРабота.Задача) Тогда
			
			МассивЗадач.Добавить(СтрокаРабота.Задача);
			
			ДанныеРаботы = НовыйДанныеВнеплановойРаботыСотрудника();
			ДанныеРаботы.Работа       = СтрокаРабота.Задача;
			ДанныеРаботы.Длительность = СтрокаРабота.Длительность;
			
			Если ЗначениеЗаполнено(СтрокаРабота.ТехническийПроект) Тогда
				
				ДанныеТехническогоПроекта = ОбработанныеДанныеДляПрочихРаботФорматеMXL.ЗадачиТехническихПроектов.Найти(СтрокаРабота.ТехническийПроект);
				
				Если ДанныеТехническогоПроекта = Неопределено Тогда
					
					ДанныеТехническогоПроекта = НовыйДанныеВнеплановойРаботыСотрудника();
					ДанныеТехническогоПроекта.Работа = СтрокаРабота.ТехническийПроект;
					ДанныеТехническогоПроекта.Вставить("Работы", Новый Массив);
					
					ОбработанныеДанныеДляПрочихРаботФорматеMXL.ЗадачиТехническихПроектов.Добавить(ДанныеТехническогоПроекта);
					МассивТехническихПроектов.Добавить(СтрокаРабота.ТехническийПроект);
					
				КонецЕсли;
				
				ДанныеТехническогоПроекта.Работы.Добавить(ДанныеРаботы);
				ДанныеТехническогоПроекта.Длительность = ДанныеТехническогоПроекта.Длительность + ДанныеРаботы.Длительность;
				
			Иначе
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.НеПроектныеЗадачи.Добавить(ДанныеРаботы);
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.ТехническийПроект) Тогда
			
			ДанныеТехническогоПроекта = ОбработанныеДанныеДляПрочихРаботФорматеMXL.ТолькоТехническиеПроекты.Найти(СтрокаРабота.ТехническийПроект);
			
			Если ДанныеТехническогоПроекта = Неопределено Тогда
				
				ДанныеТехническогоПроекта = НовыйДанныеВнеплановойРаботыСотрудника();
				ДанныеТехническогоПроекта.Работа       = СтрокаРабота.ТехническийПроект;
				ДанныеТехническогоПроекта.Длительность = СтрокаРабота.Длительность;
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.ТолькоТехническиеПроекты.Добавить(ДанныеТехническогоПроекта);
				
			Иначе
				
				ДанныеТехническогоПроекта.Длительность = ДанныеТехническогоПроекта.Длительность + СтрокаРабота.Длительность;
				
			КонецЕсли;
			
			МассивТехническихПроектов.Добавить(СтрокаРабота.ТехническийПроект);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.Ошибка) Тогда
			
			ДанныеОшибки = ОбработанныеДанныеДляПрочихРаботФорматеMXL.Ошибки.Найти(СтрокаРабота.Ошибка);
			
			Если ДанныеОшибки = Неопределено Тогда
				
				ДанныеОшибки = НовыйДанныеВнеплановойРаботыСотрудника();
				ДанныеОшибки.Работа       = СтрокаРабота.Ошибка;
				ДанныеОшибки.Длительность = СтрокаРабота.Длительность;
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.Ошибки.Добавить(ДанныеОшибки);
				
			Иначе
				
				ДанныеОшибки.Длительность = ДанныеОшибки.Длительность + СтрокаРабота.Длительность;
				
			КонецЕсли;
			
			МассивОшибок.Добавить(СтрокаРабота.Ошибка);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.ВидДеятельности) Тогда
			
			ДанныеВидаДеятельности = ОбработанныеДанныеДляПрочихРаботФорматеMXL.ВидыДеятельности.Найти(СтрокаРабота.ВидДеятельности);
			
			Если ДанныеВидаДеятельности = Неопределено Тогда
				
				ДанныеВидаДеятельности = НовыйДанныеВнеплановойРаботыСотрудника();
				ДанныеВидаДеятельности.Работа       = СтрокаРабота.ВидДеятельности;
				ДанныеВидаДеятельности.Длительность = СтрокаРабота.Длительность;
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.ВидыДеятельности.Добавить(ДанныеВидаДеятельности);
				
			Иначе
				
				ДанныеВидаДеятельности.Длительность = ДанныеВидаДеятельности.Длительность + СтрокаРабота.Длительность;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов);
	ДозаполнитьСостоянияРаботВДанныхВнеплановыхРабот(РезультатЗапроса, ОбработанныеДанныеДляПрочихРаботФорматеMXL);
	
	Возврат ОбработанныеДанныеДляПрочихРаботФорматеMXL;
	
КонецФункции

Процедура ДозаполнитьСостоянияРаботВДанныхВнеплановыхРабот(РезультатЗапроса, ОбработанныеДанныеДляПрочихРаботФорматеMXL)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеРабот = Новый Соответствие;
	
	ВыборкаСостояния = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаСостояния.Следующий() Цикл
		
		ДанныеСостояния = Новый Структура;
		ДанныеСостояния.Вставить("ВыполнитьК",    Формат(ВыборкаСостояния.СрокВыполнения, "ДЛФ=D"));
		ДанныеСостояния.Вставить("Представление", ВыборкаСостояния.Представление);
		ДанныеСостояния.Вставить("Состояние",     СтрШаблон(НСтр("ru = '%1, %2'"),
		                                                    ВыборкаСостояния.ПредставлениеСтатуса, 
		                                                    Формат(ВыборкаСостояния.ДатаИзмененияСтатуса, "ДЛФ=D; ДП=-")));
		
		СоответствиеРабот.Вставить(ВыборкаСостояния.Ссылка, ДанныеСостояния);
		
	КонецЦикла;
	
	Для Каждого ДанныеТехническогоПроекта Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.ЗадачиТехническихПроектов Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеТехническогоПроекта.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеТехническогоПроекта.Состояние     = ДанныеРаботы.Состояние;
			ДанныеТехническогоПроекта.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеТехническогоПроекта.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
		Для Каждого ДанныеЗадачи Из ДанныеТехническогоПроекта.Работы Цикл
			
			ДанныеРаботы = СоответствиеРабот.Получить(ДанныеЗадачи.Работа);
			
			Если ДанныеРаботы <> Неопределено Тогда
				ДанныеЗадачи.Состояние     = ДанныеРаботы.Состояние;
				ДанныеЗадачи.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
				ДанныеЗадачи.Представление = ДанныеРаботы.Представление;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ДанныеТехническогоПроекта Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.ТолькоТехническиеПроекты Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеТехническогоПроекта.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеТехническогоПроекта.Состояние     = ДанныеРаботы.Состояние;
			ДанныеТехническогоПроекта.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеТехническогоПроекта.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеОшибки Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.Ошибки Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеОшибки.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеОшибки.Состояние     = ДанныеРаботы.Состояние;
			ДанныеОшибки.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеОшибки.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеЗадачи Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.НеПроектныеЗадачи Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеЗадачи.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеЗадачи.Состояние     = ДанныеРаботы.Состояние;
			ДанныеЗадачи.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеЗадачи.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйДанныеВнеплановойРаботыСотрудника()
	
	Данные = Новый Структура;
	Данные.Вставить("Работа");
	Данные.Вставить("Длительность", 0);
	Данные.Вставить("Состояние");
	Данные.Вставить("ВыполнитьК");
	Данные.Вставить("Представление");
	
	Возврат Данные;
	
КонецФункции

Функция ПрочиеРаботыВФорматеMXL(ПрочиеРаботы, Сотрудник, ДанныеПлана, ОбщаяДлительность)
	
	Макет = Обработки.Планирование.ПолучитьМакет("ПрочиеРаботы");
	
#Область ОбластиМакета
	
	ОбластиМакета = Новый Структура;
	ОбластиМакета.Вставить("ЗаголовокРаботыСотрудника", Макет.ПолучитьОбласть("ЗаголовокРаботыСотрудника"));
	ОбластиМакета.Вставить("ЗаголовокПериодВидПлана",   Макет.ПолучитьОбласть("ЗаголовокПериодВидПлана"));
	ОбластиМакета.Вставить("ШапкаТаблицы",              Макет.ПолучитьОбласть("ШапкаТаблицы"));
	ОбластиМакета.Вставить("СтрокаРабота",              Макет.ПолучитьОбласть("СтрокаРабота"));
	ОбластиМакета.Вставить("СтрокаГруппировка",         Макет.ПолучитьОбласть("СтрокаГруппировка"));
	ОбластиМакета.Вставить("СтрокаВидДеятельности",     Макет.ПолучитьОбласть("СтрокаВидДеятельности"));
	ОбластиМакета.Вставить("ПустаяСтрока",              Макет.ПолучитьОбласть("ПустаяСтрока"));
	
#КонецОбласти
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПустаяСтрока);
	
	ОбластиМакета.ЗаголовокРаботыСотрудника.Параметры.Заголовок = СтрШаблон(НСтр("ru = 'Прочие работы сотрудника %1'"), Сотрудник);
	ТабличныйДокумент.Вывести(ОбластиМакета.ЗаголовокРаботыСотрудника);
	
	ОбластиМакета.ЗаголовокПериодВидПлана.Параметры.Заголовок =  СтрШаблон(НСтр("ru = 'за период %1 - %2 по виду планов ""%3"".'"), 
	                                                                       Формат(ДанныеПлана.НачалоПериода, "ДЛФ=D"),
	                                                                       Формат(ДанныеПлана.КонецПериода, "ДЛФ=D"),
	                                                                       ДанныеПлана.НаименованиеВидаПлана);
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ЗаголовокПериодВидПлана);
	
	ОбработанныеДанные = ОбработанныеДанныеДляПрочихРаботФорматеMXL(ПрочиеРаботы);
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ПустаяСтрока);
	
	ОбластиМакета.ШапкаТаблицы.Параметры.ВсегоВнеплановыеРаботы = ЧасыПоДлительностиВСекундах(ОбщаяДлительность);
	ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаТаблицы);
	
	ВывестиВнеплановыеРаботыТолькоТехническиеПроекты(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыТехническиеПроектыЗадачи(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыПрочиеЗадачи(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыОшибки(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыВидыДеятельности(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиВнеплановыеРаботыТолькоТехническиеПроекты(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Для Каждого ДанныеТехническогоПроекта Из Данные.ТолькоТехническиеПроекты Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = ДанныеТехническогоПроекта.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеТехническогоПроекта.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеТехническогоПроекта.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеТехническогоПроекта.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеТехническогоПроекта.Работа;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыТехническиеПроектыЗадачи(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Для Каждого ДанныеТехническогоПроекта Из Данные.ЗадачиТехническихПроектов Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = ДанныеТехническогоПроекта.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеТехническогоПроекта.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеТехническогоПроекта.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеТехническогоПроекта.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеТехническогоПроекта.Работа;
		
		ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы; 
		ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
		Для Каждого ДанныеЗадачи Из ДанныеТехническогоПроекта.Работы Цикл
			
			ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
			ПараметрыОбласти.Работа          = "   " + ДанныеЗадачи.Представление;
			ПараметрыОбласти.СостояниеРаботы = ДанныеЗадачи.Состояние;
			ПараметрыОбласти.СрокВыполнения  = ДанныеЗадачи.ВыполнитьК;
			ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеЗадачи.Длительность), "ЧРД=.");
			ПараметрыОбласти.РаботаСсылка    = ДанныеЗадачи.Работа;
			
			ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы; 
			ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаВнеплановойРаботы;
			
			ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыПрочиеЗадачи(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Если Данные.НеПроектныеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ОбластиМакета.СтрокаГруппировка.Параметры;
	ПараметрыОбласти.ИмяГруппировки  = НСтр("ru = 'Прочие задачи'");
	ПараметрыОбласти.ВсегоЧасы       = ОбщаяДлительностьПоМассивуРабот(Данные.НеПроектныеЗадачи);
	ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаГруппировка);
	
	Для Каждого ДанныеЗадачи Из Данные.НеПроектныеЗадачи Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = "   " + ДанныеЗадачи.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеЗадачи.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеЗадачи.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеЗадачи.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеЗадачи.Работа;
		
		ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы;
		ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаВнеплановойРаботы;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыОшибки(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Если Данные.Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ОбластиМакета.СтрокаГруппировка.Параметры;
	ПараметрыОбласти.ИмяГруппировки  = НСтр("ru = 'Ошибки'");
	ПараметрыОбласти.ВсегоЧасы       = ОбщаяДлительностьПоМассивуРабот(Данные.Ошибки);
	ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаГруппировка);
	
	Для Каждого ДанныеОшибки Из Данные.Ошибки Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = "   " + ДанныеОшибки.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеОшибки.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеОшибки.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеОшибки.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеОшибки.Работа;
		
		ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы;
		ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаВнеплановойРаботы;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыВидыДеятельности(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Если Данные.ВидыДеятельности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ОбластиМакета.СтрокаГруппировка.Параметры;
	ПараметрыОбласти.ИмяГруппировки  = НСтр("ru = 'Виды деятельности'");
	ПараметрыОбласти.ВсегоЧасы       = ОбщаяДлительностьПоМассивуРабот(Данные.ВидыДеятельности);
	ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаГруппировка);
	
	Для Каждого ДанныеВидаДеятельности Из Данные.ВидыДеятельности Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаВидДеятельности.Параметры;
		ПараметрыОбласти.Работа = "   " + Строка(ДанныеВидаДеятельности.Работа);
		ПараметрыОбласти.Часы   = Формат(ЧасыПоДлительностиВСекундах(ДанныеВидаДеятельности.Длительность), "ЧРД=.");
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаВидДеятельности);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбщаяДлительностьПоМассивуРабот(МассивРабот)
	
	ОбщаяДлительность = 0;
	
	Для Каждого Работа Из МассивРабот Цикл
		
		ОбщаяДлительность = Работа.Длительность + ОбщаяДлительность;
		
	КонецЦикла;
	
	Возврат ЧасыПоДлительностиВСекундах(ОбщаяДлительность);
	
КонецФункции

Функция НовыйОбработанныеДанныеДляПрочихРаботФорматеMXL()
	
	Данные = Новый Структура;
	Данные.Вставить("ТолькоТехническиеПроекты",  Новый Массив);
	Данные.Вставить("ЗадачиТехническихПроектов", Новый Массив);
	Данные.Вставить("НеПроектныеЗадачи",         Новый Массив);
	Данные.Вставить("Ошибки",                    Новый Массив);
	Данные.Вставить("ВидыДеятельности",          Новый Массив);
	
	Возврат Данные;
	
КонецФункции

Функция ТекстЗапросаДанныеФактическиВыполненныхРабот()
	
	Возврат "
	|ВЫБРАТЬ
	|	ЗапланированныеРаботы.Сотрудник КАК Сотрудник,
	|	ЗапланированныеРаботы.Работа    КАК Работа
	|ПОМЕСТИТЬ ЗапланированныеРаботы
	|ИЗ
	|	&ЗапланированныеРаботы КАК ЗапланированныеРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	УчетВремени.Пользователь      КАК Пользователь,
	|	УчетВремени.ВидДеятельности   КАК ВидДеятельности,
	|	УчетВремени.Проект            КАК Проект,
	|	УчетВремени.ТехническийПроект КАК ТехническийПроект,
	|	УчетВремени.Ошибка            КАК Ошибка,
	|	УчетВремени.Задача            КАК Задача,
	|	УчетВремени.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремени
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|ГДЕ
	|	УчетВремени.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УчетВремени.Пользователь В(&Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЗапланированныеРаботы.Сотрудник      КАК Сотрудник,
	|	ЗапланированныеРаботы.Работа         КАК Работа,
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ДочерняяЗадачаРаботы
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	ЗапланированныеРаботы КАК ЗапланированныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗапланированныеРаботы.Работа = ИерархияЗадачПроцесса.Родитель
	|ГДЕ
	|	ЗапланированныеРаботы.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	СУММА(ДанныеУчетаВремени.Длительность) КАК Длительность,
	|	ДочерниеЗадачиРабот.Сотрудник          КАК Сотрудник,
	|	ДочерниеЗадачиРабот.Работа             КАК Работа
	|ПОМЕСТИТЬ ФактическиеДанныеРаботЗадач
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ПО ДочерниеЗадачиРабот.ДочерняяЗадачаРаботы = ДанныеУчетаВремени.Задача
	|			И ДочерниеЗадачиРабот.Сотрудник = ДанныеУчетаВремени.Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Сотрудник,
	|	ДочерниеЗадачиРабот.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ЗапланированныеРаботы.Сотрудник КАК Сотрудник,
	|	ЗапланированныеРаботы.Работа    КАК Работа
	|ПОМЕСТИТЬ РаботыПослеОпределенияЗадач
	|ИЗ
	|	ЗапланированныеРаботы КАК ЗапланированныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботЗадач КАК ФактическиеДанныеРаботЗадач
	|		ПО ЗапланированныеРаботы.Сотрудник = ФактическиеДанныеРаботЗадач.Сотрудник
	|			И ЗапланированныеРаботы.Работа = ФактическиеДанныеРаботЗадач.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботЗадач.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ДанныеУчетаВремени.Пользователь      КАК Пользователь,
	|	ДанныеУчетаВремени.ВидДеятельности   КАК ВидДеятельности,
	|	ДанныеУчетаВремени.Проект            КАК Проект,
	|	ДанныеУчетаВремени.ТехническийПроект КАК ТехническийПроект,
	|	ДанныеУчетаВремени.Ошибка            КАК Ошибка,
	|	ДанныеУчетаВремени.Задача            КАК Задача,
	|	ДанныеУчетаВремени.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремениПослеОпределенияЗадач
	|ИЗ
	|	ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ПО ДанныеУчетаВремени.Пользователь = ДочерниеЗадачиРабот.Сотрудник
	|			И ДанныеУчетаВремени.Задача = ДочерниеЗадачиРабот.ДочерняяЗадачаРаботы
	|ГДЕ
	|	ДочерниеЗадачиРабот.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияЗадач.Сотрудник                       КАК Сотрудник,
	|	РаботыПослеОпределенияЗадач.Работа                          КАК Работа,
	|	СУММА(ДанныеУчетаВремениПослеОпределенияЗадач.Длительность) КАК Длительность
	|ПОМЕСТИТЬ ФактическиеДанныеРаботТехническихПроектов
	|ИЗ
	|	РаботыПослеОпределенияЗадач КАК РаботыПослеОпределенияЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремениПослеОпределенияЗадач КАК ДанныеУчетаВремениПослеОпределенияЗадач
	|		ПО РаботыПослеОпределенияЗадач.Сотрудник = ДанныеУчетаВремениПослеОпределенияЗадач.Пользователь
	|			И РаботыПослеОпределенияЗадач.Работа = ДанныеУчетаВремениПослеОпределенияЗадач.ТехническийПроект
	|ГДЕ
	|	РаботыПослеОпределенияЗадач.Работа ССЫЛКА Справочник.ТехническиеПроекты
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботыПослеОпределенияЗадач.Сотрудник,
	|	РаботыПослеОпределенияЗадач.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияЗадач.Сотрудник КАК Сотрудник,
	|	РаботыПослеОпределенияЗадач.Работа    КАК Работа
	|ПОМЕСТИТЬ РаботыПослеОпределенияТехническихПроектов
	|ИЗ
	|	РаботыПослеОпределенияЗадач КАК РаботыПослеОпределенияЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботТехническихПроектов КАК ФактическиеДанныеРаботТехническихПроектов
	|		ПО РаботыПослеОпределенияЗадач.Сотрудник = ФактическиеДанныеРаботТехническихПроектов.Сотрудник
	|			И РаботыПослеОпределенияЗадач.Работа = ФактическиеДанныеРаботТехническихПроектов.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботТехническихПроектов.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////8
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Пользователь      КАК Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.ВидДеятельности   КАК ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Проект            КАК Проект,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.ТехническийПроект КАК ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Ошибка            КАК Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Задача            КАК Задача,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремениПослеОпределенияТехническихПроектов
	|ИЗ
	|	ДанныеУчетаВремениПослеОпределенияЗадач КАК ДанныеУчетаВремениПослеОпределенияЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботТехническихПроектов КАК ФактическиеДанныеРаботТехническихПроектов
	|		ПО ДанныеУчетаВремениПослеОпределенияЗадач.Пользователь = ФактическиеДанныеРаботТехническихПроектов.Сотрудник
	|			И ДанныеУчетаВремениПослеОпределенияЗадач.ТехническийПроект = ФактическиеДанныеРаботТехническихПроектов.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботТехническихПроектов.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////9
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияТехническихПроектов.Сотрудник                       КАК Сотрудник,
	|	РаботыПослеОпределенияТехническихПроектов.Работа                          КАК Работа,
	|	СУММА(ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Длительность) КАК Длительность
	|ПОМЕСТИТЬ ФактическиеДанныеРаботОшибки
	|ИЗ
	|	РаботыПослеОпределенияТехническихПроектов КАК РаботыПослеОпределенияТехническихПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремениПослеОпределенияТехническихПроектов КАК ДанныеУчетаВремениПослеОпределенияТехническихПроектов
	|		ПО РаботыПослеОпределенияТехническихПроектов.Сотрудник = ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Пользователь
	|			И РаботыПослеОпределенияТехническихПроектов.Работа = ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Ошибка
	|ГДЕ
	|	РаботыПослеОпределенияТехническихПроектов.Работа ССЫЛКА Справочник.Ошибки
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботыПослеОпределенияТехническихПроектов.Сотрудник,
	|	РаботыПослеОпределенияТехническихПроектов.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////10
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияТехническихПроектов.Сотрудник КАК Сотрудник,
	|	РаботыПослеОпределенияТехническихПроектов.Работа    КАК Работа
	|ПОМЕСТИТЬ РаботыПослеОпределенияОшибок
	|ИЗ
	|	РаботыПослеОпределенияТехническихПроектов КАК РаботыПослеОпределенияТехническихПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботОшибки КАК ФактическиеДанныеРаботОшибки
	|		ПО РаботыПослеОпределенияТехническихПроектов.Сотрудник = ФактическиеДанныеРаботОшибки.Сотрудник
	|			И РаботыПослеОпределенияТехническихПроектов.Работа = ФактическиеДанныеРаботОшибки.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботОшибки.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////11
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Пользователь      КАК Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.ВидДеятельности   КАК ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Проект            КАК Проект,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.ТехническийПроект КАК ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Ошибка            КАК Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Задача            КАК Задача,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремениПослеОпределенияОшибок
	|ИЗ
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов КАК ДанныеУчетаВремениПослеОпределенияТехническихПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботОшибки КАК ФактическиеДанныеРаботОшибки
	|		ПО ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Пользователь = ФактическиеДанныеРаботОшибки.Сотрудник
	|			И ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Ошибка = ФактическиеДанныеРаботОшибки.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботОшибки.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////12
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияОшибок.Сотрудник                КАК Сотрудник,
	|	РаботыПослеОпределенияОшибок.Работа                   КАК Работа,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Длительность КАК Длительность
	|ПОМЕСТИТЬ ФактическиеДанныеРаботВидовДеятельности
	|ИЗ
	|	РаботыПослеОпределенияОшибок КАК РаботыПослеОпределенияОшибок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремениПослеОпределенияОшибок КАК ДанныеУчетаВремениПослеОпределенияОшибок
	|		ПО РаботыПослеОпределенияОшибок.Сотрудник = ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь
	|			И РаботыПослеОпределенияОшибок.Работа = ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////13
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь        КАК Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности     КАК ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Проект              КАК Проект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ТехническийПроект   КАК ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Ошибка              КАК Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Задача              КАК Задача,
	|	СУММА(ДанныеУчетаВремениПослеОпределенияОшибок.Длительность) КАК Длительность
	|ИЗ
	|	ДанныеУчетаВремениПослеОпределенияОшибок КАК ДанныеУчетаВремениПослеОпределенияОшибок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботВидовДеятельности КАК ФактическиеДанныеРаботВидовДеятельности
	|		ПО ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь = ФактическиеДанныеРаботВидовДеятельности.Сотрудник
	|			И ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности = ФактическиеДанныеРаботВидовДеятельности.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботВидовДеятельности.Работа ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Проект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Задача
	|ИТОГИ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////14
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.Работа КАК Работа,
	|	СУММА(ВложенныйЗапрос.Длительность) КАК Длительность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФактическиеДанныеРаботЗадач.Длительность КАК Длительность,
	|		ФактическиеДанныеРаботЗадач.Сотрудник КАК Сотрудник,
	|		ФактическиеДанныеРаботЗадач.Работа КАК Работа
	|	ИЗ
	|		ФактическиеДанныеРаботЗадач КАК ФактическиеДанныеРаботЗадач
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФактическиеДанныеРаботТехническихПроектов.Длительность,
	|		ФактическиеДанныеРаботТехническихПроектов.Сотрудник,
	|		ФактическиеДанныеРаботТехническихПроектов.Работа
	|	ИЗ
	|		ФактическиеДанныеРаботТехническихПроектов КАК ФактическиеДанныеРаботТехническихПроектов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ФактическиеДанныеРаботОшибки.Длительность,
	|		ФактическиеДанныеРаботОшибки.Сотрудник,
	|		ФактическиеДанныеРаботОшибки.Работа
	|	ИЗ
	|		ФактическиеДанныеРаботОшибки КАК ФактическиеДанныеРаботОшибки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФактическиеДанныеРаботВидовДеятельности.Длительность,
	|		ФактическиеДанныеРаботВидовДеятельности.Сотрудник,
	|		ФактическиеДанныеРаботВидовДеятельности.Работа
	|	ИЗ
	|		ФактическиеДанныеРаботВидовДеятельности КАК ФактическиеДанныеРаботВидовДеятельности) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Работа
	|ИТОГИ ПО
	|	Сотрудник";
	
КонецФункции

Функция ДанныеРаботСотрудников(РаботыСотрудников)
	
	МассивСотрудников = Новый Массив;
	
	ТаблицаРаботСотрудников = Новый ТаблицаЗначений;
	ТаблицаРаботСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаРаботСотрудников.Колонки.Добавить("Работа", Метаданные.РегистрыСведений.ЗаписиПлана.Измерения.Работа.Тип);
	
	Для Каждого ДанныеРаботСотрудника Из РаботыСотрудников Цикл
		
		МассивСотрудников.Добавить(ДанныеРаботСотрудника.Сотрудник);
		
		Для Каждого Работа Из ДанныеРаботСотрудника.Работы Цикл
			
			НоваяСтрока = ТаблицаРаботСотрудников.Добавить();
			
			НоваяСтрока.Сотрудник = ДанныеРаботСотрудника.Сотрудник;
			НоваяСтрока.Работа    = Работа;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеРаботСотрудников = Новый Структура;
	ДанныеРаботСотрудников.Вставить("ТаблицаРаботСотрудников", ТаблицаРаботСотрудников);
	ДанныеРаботСотрудников.Вставить("МассивСотрудников",       МассивСотрудников);
	
	Возврат ДанныеРаботСотрудников;
	
КонецФункции

Функция ЧасыПоДлительностиВСекундах(Секунды)
	
	Возврат Окр(Секунды / 3600, 1, РежимОкругления.Окр15как20);
	
КонецФункции

#КонецОбласти

#Область ОстаткиПланируемыхРабот

Функция ПодготовленныеДанныеОстатковПланируемыхРабот(ПараметрыПодготовки) 
	
	ДанныеДляПолучения = ПараметрыПодготовки.ДанныеДляПолучения;
	
	Возврат ДанныеОстатковПланируемыхРабот(ДанныеДляПолучения);
	
КонецФункции

Функция ДанныеОстатковПланируемыхРабот(ДанныеДляПолучения) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеОстатковПланируемыхРабот();
	
	Запрос.УстановитьПараметр("ВидРесурса",  ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("МассивРабот", ДанныеДляПолучения.ПланируемыеРаботы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивРабот = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеРаботы = Новый Структура;
		ДанныеРаботы.Вставить("Работа",            Выборка.Работа);
		ДанныеРаботы.Вставить("Запланировано",     Выборка.Запланировано);
		ДанныеРаботы.Вставить("ДанныеУчетВремени", ЧасыПоДлительностиВСекундах(Выборка.ДлительностьУчетВремени));
		
		МассивРабот.Добавить(ДанныеРаботы);
		
	КонецЦикла;
	
	Возврат МассивРабот;
	
КонецФункции

Функция ТекстЗапросаДанныеОстатковПланируемыхРабот()
	
	Возврат "
	|ВЫБРАТЬ
	|	СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних) КАК Запланировано,
	|	ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса КАК Работа
	|ПОМЕСТИТЬ ЗапланированоЗадачи
	|ИЗ
	|	РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|ГДЕ
	|	ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса
	|	И ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса В(&МассивРабот)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Предмет КАК Работа,
	|	СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних) КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоТехническиеПроекты
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ТехническиеПроекты.Ссылка = ЗадачиПроцесса.Предмет
	|			И (ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ЗадачиПроцесса.Ссылка = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&МассивРабот)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В(&МассивРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ДочерниеЗадачиРабот.Родитель КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачи
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ПО УчетВремени.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ЗадачиПроцесса.Предмет КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяТехническиеПроекты
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО УчетВремени.Задача = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&МассивРабот)
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Работа КАК Работа,
	|	СУММА(ВложенныйЗапрос.Запланировано) КАК Запланировано,
	|	СУММА(ВложенныйЗапрос.ДлительностьУчетВремени) КАК ДлительностьУчетВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапланированоЗадачи.Работа КАК Работа,
	|		ЗапланированоЗадачи.Запланировано КАК Запланировано,
	|		ЕСТЬNULL(ЗатраченноеВремяЗадачи.Длительность, 0) КАК ДлительностьУчетВремени
	|	ИЗ
	|		ЗапланированоЗадачи КАК ЗапланированоЗадачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|			ПО ЗапланированоЗадачи.Работа = ЗатраченноеВремяЗадачи.Работа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяЗадачи.Работа,
	|		0,
	|		ЗатраченноеВремяЗадачи.Длительность
	|	ИЗ
	|		ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоЗадачи КАК ЗапланированоЗадачи
	|			ПО (ЗапланированоЗадачи.Работа = ЗатраченноеВремяЗадачи.Работа)
	|	ГДЕ
	|		ЗапланированоЗадачи.Запланировано ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапланированоТехническиеПроекты.Работа,
	|		ЗапланированоТехническиеПроекты.Запланировано,
	|		ЕСТЬNULL(ЗатраченноеВремяТехническиеПроекты.Длительность, 0)
	|	ИЗ
	|		ЗапланированоТехническиеПроекты КАК ЗапланированоТехническиеПроекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяТехническиеПроекты КАК ЗатраченноеВремяТехническиеПроекты
	|			ПО ЗапланированоТехническиеПроекты.Работа = ЗатраченноеВремяТехническиеПроекты.Работа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяТехническиеПроекты.Работа,
	|		0,
	|		ЗатраченноеВремяТехническиеПроекты.Длительность
	|	ИЗ
	|		ЗатраченноеВремяТехническиеПроекты КАК ЗатраченноеВремяТехническиеПроекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоТехническиеПроекты КАК ЗапланированоТехническиеПроекты
	|			ПО (ЗапланированоТехническиеПроекты.Работа = ЗатраченноеВремяТехническиеПроекты.Работа)
	|	ГДЕ
	|		ЗапланированоТехническиеПроекты.Запланировано ЕСТЬ NULL) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Работа";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеВидовДеятельнстиПоСтатистике

Функция ПодготовленныеДанныеВидовДеятельностиПоСтатистике(ПараметрыПодготовки)
	
	ПодготовленныеДанные = Новый Массив;
	
	НачалоПериода = НачалоДня(ПараметрыПодготовки.ДанныеДляПолучения.НачалоПериода);
	КонецПериода  = КонецДня(ПараметрыПодготовки.ДанныеДляПолучения.КонецПериода);
	
	ДанныеПериодов = ПериодыДляОпределенияВидовДеятельностиПоСтатистике(НачалоПериода, КонецПериода);
	
	Запрос = Новый Запрос;
	
	Если ПараметрыПодготовки.ДанныеДляПолучения.ТипЗаполнения = "ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие"
		Или ПараметрыПодготовки.ДанныеДляПолучения.ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		Или ПараметрыПодготовки.ДанныеДляПолучения.ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
		
		Запрос.Текст = ТекстЗапросаВидыДеятельностиПоСтатистикеСотрудники();
		Запрос.УстановитьПараметр("Сотрудники", ПараметрыПодготовки.ДанныеДляПолучения.РаботыСотрудники);
		
	Иначе
		
		Запрос.Текст = ТекстЗапросаПоСтатистикеВыбранныеВидыДеятельности();
		Запрос.УстановитьПараметр("СотрудникиВидыДеятельности", ТаблицаСотрудникиВидыДеятельностиПоСтруктуре(ПараметрыПодготовки.ДанныеДляПолучения.РаботыСотрудники)); 
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериодов", ДанныеПериодов.НачалоПериодов);
	Запрос.УстановитьПараметр("КонецПериодов",  ДанныеПериодов.КонецПериодов);
	Запрос.УстановитьПараметр("НачалоПериода1", ДанныеПериодов.НачалоПериода1);
	Запрос.УстановитьПараметр("КонецПериода1",  ДанныеПериодов.КонецПериода1);
	Запрос.УстановитьПараметр("НачалоПериода2", ДанныеПериодов.НачалоПериода2);
	Запрос.УстановитьПараметр("КонецПериода2",  ДанныеПериодов.КонецПериода2);
	Запрос.УстановитьПараметр("НачалоПериода3", ДанныеПериодов.НачалоПериода3);
	Запрос.УстановитьПараметр("КонецПериода3",  ДанныеПериодов.КонецПериода3);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСотрудники = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		МассивВидовДеятельности = Новый Массив;
		ВыборкаВидыДеятельности = ВыборкаСотрудники.Выбрать();
		
		Пока ВыборкаВидыДеятельности.Следующий() Цикл
			
			ДанныеВидаДеятельности = Новый Структура;
			ДанныеВидаДеятельности.Вставить("ВидДеятельности", ВыборкаВидыДеятельности.ВидДеятельности);
			ДанныеВидаДеятельности.Вставить("Часы",            Окр(ЧасыПоДлительностиВСекундах(ВыборкаВидыДеятельности.Длительность)/3, 1, РежимОкругления.Окр15как20));
			
			МассивВидовДеятельности.Добавить(ДанныеВидаДеятельности);
			
		КонецЦикла;
		
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("Сотрудник",        ВыборкаСотрудники.Сотрудник);
		ДанныеСотрудника.Вставить("ВидыДеятельности", МассивВидовДеятельности);
		
		ПодготовленныеДанные.Добавить(ДанныеСотрудника);
		
	КонецЦикла;
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция ТаблицаСотрудникиВидыДеятельностиПоСтруктуре(ВидыДеятельностиСотрудники)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник",       Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДанных.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	
	Для Каждого ДанныеВидаДеятельности Из ВидыДеятельностиСотрудники Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Сотрудник =       ДанныеВидаДеятельности.Сотрудник;
		НоваяСтрока.ВидДеятельности = ДанныеВидаДеятельности.ВидДеятельности;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПериодыДляОпределенияВидовДеятельностиПоСтатистике(НачалоПериода, КонецПериода)
	
	ДлинаПериода = КонецПериода - НачалоПериода + 1;
	
	ДанныеПериодов = Новый Структура;
	
	ДанныеПериодов.Вставить("НачалоПериода1", НачалоПериода - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода1",  НачалоПериода - 1);
	ДанныеПериодов.Вставить("НачалоПериода2", ДанныеПериодов.НачалоПериода1 - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода2",  ДанныеПериодов.НачалоПериода1 - 1);
	ДанныеПериодов.Вставить("НачалоПериода3", ДанныеПериодов.НачалоПериода2 - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода3",  ДанныеПериодов.НачалоПериода2 - 1);
	ДанныеПериодов.Вставить("КонецПериодов",  ДанныеПериодов.КонецПериода1);
	ДанныеПериодов.Вставить("НачалоПериодов", ДанныеПериодов.НачалоПериода3);
	
	Возврат ДанныеПериодов;
	
КонецФункции

Функция ТекстЗапросаПоСтатистикеВыбранныеВидыДеятельности()
	
	Возврат "
	|ВЫБРАТЬ
	|	СотрудникиВидыДеятельности.Сотрудник КАК Сотрудник,
	|	СотрудникиВидыДеятельности.ВидДеятельности КАК ВидДеятельности
	|ПОМЕСТИТЬ СотрудникиВидыДеятельности
	|ИЗ
	|	&СотрудникиВидыДеятельности КАК СотрудникиВидыДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетВремени.ВидДеятельности КАК ВидДеятельности,
	|	УчетВремени.Пользователь КАК Пользователь,
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК НомерПериода
	|ПОМЕСТИТЬ ДанныеУчетаВремени
	|ИЗ
	|	СотрудникиВидыДеятельности КАК СотрудникиВидыДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.ВидДеятельности = СотрудникиВидыДеятельности.ВидДеятельности)
	|			И (УчетВремени.Пользователь = СотрудникиВидыДеятельности.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельности КАК ВидыДеятельности
	|		ПО (УчетВремени.ВидДеятельности = ВидыДеятельности.Ссылка)
	|ГДЕ
	|	НЕ ВидыДеятельности.ТребуемаяДетализация = ЗНАЧЕНИЕ(Перечисление.ДетализацияВПланированииИУчетеВремени.Работа)
	|	И УчетВремени.Период МЕЖДУ &НачалоПериодов И &КонецПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетВремени.Пользователь,
	|	УчетВремени.ВидДеятельности,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУчетаВремени.Пользователь КАК Пользователь,
	|	ДанныеУчетаВремени.ВидДеятельности КАК ВидДеятельности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеУчетаВремени.НомерПериода) КАК НомерПериода
	|ПОМЕСТИТЬ ВидыДеятельностиБолееОдногоПериода
	|ИЗ
	|	ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремени.Пользователь,
	|	ДанныеУчетаВремени.ВидДеятельности
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеУчетаВремени.НомерПериода) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДеятельностиБолееОдногоПериода.Пользователь КАК Сотрудник,
	|	ВидыДеятельностиБолееОдногоПериода.ВидДеятельности КАК ВидДеятельности,
	|	СУММА(ДанныеУчетаВремени.Длительность) КАК Длительность
	|ИЗ
	|	ВидыДеятельностиБолееОдногоПериода КАК ВидыДеятельностиБолееОдногоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ПО ВидыДеятельностиБолееОдногоПериода.Пользователь = ДанныеУчетаВремени.Пользователь
	|			И ВидыДеятельностиБолееОдногоПериода.ВидДеятельности = ДанныеУчетаВремени.ВидДеятельности
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыДеятельностиБолееОдногоПериода.Пользователь,
	|	ВидыДеятельностиБолееОдногоПериода.ВидДеятельности
	|ИТОГИ ПО
	|	Сотрудник";
	
КонецФункции

Функция ТекстЗапросаВидыДеятельностиПоСтатистикеСотрудники()
	
	Возврат "
	|ВЫБРАТЬ
	|	УчетВремени.ВидДеятельности     КАК ВидДеятельности,
	|	УчетВремени.Пользователь        КАК Пользователь,
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК НомерПериода
	|ПОМЕСТИТЬ ДанныеУчетаВремени
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельности КАК ВидыДеятельности
	|		ПО УчетВремени.ВидДеятельности = ВидыДеятельности.Ссылка
	|ГДЕ
	|	УчетВремени.Пользователь В(&Сотрудники)
	|	И НЕ ВидыДеятельности.ТребуемаяДетализация = ЗНАЧЕНИЕ(Перечисление.ДетализацияВПланированииИУчетеВремени.Работа)
	|	И УчетВремени.Период МЕЖДУ &НачалоПериодов И &КонецПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетВремени.Пользователь,
	|	УчетВремени.ВидДеятельности,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУчетаВремени.Пользователь                       КАК Пользователь,
	|	ДанныеУчетаВремени.ВидДеятельности                    КАК ВидДеятельности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеУчетаВремени.НомерПериода) КАК НомерПериода
	|ПОМЕСТИТЬ ВидыДеятельностиБолееОдногоПериода
	|ИЗ
	|	ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремени.Пользователь,
	|	ДанныеУчетаВремени.ВидДеятельности
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеУчетаВремени.НомерПериода) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДеятельностиБолееОдногоПериода.Пользователь    КАК Сотрудник,
	|	ВидыДеятельностиБолееОдногоПериода.ВидДеятельности КАК ВидДеятельности,
	|	СУММА(ДанныеУчетаВремени.Длительность)             КАК Длительность
	|ИЗ
	|	ВидыДеятельностиБолееОдногоПериода КАК ВидыДеятельностиБолееОдногоПериода,
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ПО ВидыДеятельностиБолееОдногоПериода.Пользователь = ДанныеУчетаВремени.Пользователь
	|		И ВидыДеятельностиБолееОдногоПериода.ВидДеятельности = ДанныеУчетаВремени.ВидДеятельности
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыДеятельностиБолееОдногоПериода.Пользователь,
	|	ВидыДеятельностиБолееОдногоПериода.ВидДеятельности
	|ИТОГИ ПО
	|	Сотрудник";
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтатусовРабот

Функция ТекстЗапросаДанныеОшибок()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ошибки.Ссылка                                        КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                                         КАК Предмет,
	|	Ошибки.Наименование                                  КАК Представление,
	|	Ошибки.Статус                                        КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Статус)                         КАК ПредставлениеСтатуса,
	|	Ошибки.СрокОтработки                                 КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована)
	|			ТОГДА Ошибки.ДатаРегистрации
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана)
	|			ТОГДА Ошибки.ДатаРассмотрения
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена)
	|			ТОГДА Ошибки.ДатаИсправления
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена)
	|			ТОГДА Ошибки.ДатаПроверки
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПризнана)
	|			ТОГДА Ошибки.ДатаРассмотрения
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана)
	|			ТОГДА Ошибки.ДатаОтзыва
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|			ТОГДА Ошибки.ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка В (&Ошибки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеТехническихПроектов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка                КАК Ссылка,
	|	ТехническиеПроекты.Ссылка                КАК Предмет,
	|	ТехническиеПроекты.Наименование          КАК Представление,
	|	ТехническиеПроекты.Статус                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ТехническиеПроекты.Статус) КАК ПредставлениеСтатуса,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК СрокВыполнения,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса  КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ссылка В (&ТехническиеПроекты)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеЗадач()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                КАК Ссылка,
	|	ЗадачиПроцесса.Предмет               КАК Предмет,
	|	ЗадачиПроцесса.Наименование          КАК Представление,
	|	ЗадачиПроцесса.Статус КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиПроцесса.Статус) КАК ПредставлениеСтатуса,
	|	ЗадачиПроцесса.КрайняяДатаОкончания  КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                                КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&Задачи)";
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ТекстЗапросаДанныеВеток()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ветки.Ссылка                 КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                 КАК Предмет,
	|	Ветки.Наименование           КАК Представление,
	|	Ветки.Статус                 КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(Ветки.Статус)  КАК ПредставлениеСтатуса,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)  КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Разрабатывается)
	|			ТОГДА Ветки.ДатаСоздания
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Тестируется)
	|			ТОГДА Ветки.ДатаНачалаТестирования
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена)
	|			ТОГДА Ветки.ДатаПомещения
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ                       КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	Ветки.Ссылка В (&Ветки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОбъединить()
	
	Возврат "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|"
	
КонецФункции

#КонецОбласти

#КонецОбласти
