// Для того, чтобы регламентные задания не конфликтовали за доступ к почтовому ящику,
// они последовательно вызываются из одной процедуры

Процедура ОтправитьУведомления() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПоследнейРассылки = Константы.ДатаПоследнейРассылки.Получить();
	
	// Если рассылку не удалось выполнить в течение 24 часов,она перестает быть актуальной
	ДатаАктуальностиОтправкиПочты 	= ТекущаяДата() - 86400;
	Если ДатаАктуальностиОтправкиПочты > ДатаПоследнейРассылки Тогда
		ДатаПоследнейРассылки = ДатаАктуальностиОтправкиПочты;
		Константы.ДатаПоследнейРассылки.Установить(ДатаПоследнейРассылки);
	КонецЕсли;
	
	// Каждый сервис, который хочет отправить почтовое сообщение, готовит его и добавляет
	// его вместе с ДатойРассылки в ТаблицуОтправкиПочты.
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ДатаРассылки");
	ТаблицаСообщений.Колонки.Добавить("ПараметрыПисьма");
	ТаблицаСообщений.Колонки.Добавить("СообщениеОтправлено");
	
	ТаблицаСообщений.Индексы.Добавить("ДатаРассылки");
	
	////////////////////////////////////////////////////////////////////////////////
	// Сервисы отправки почты
	
	ВерхняяГраницаПоДате = ТекущаяДата();
	
	ПроектыДляРассылкиПоТехническимПроектам = Новый Массив;
	ПроектыДляРассылкиПоЗадачам = Новый Массив;
	ПроектыДляРассылкиПоОшибкам = Новый Массив;
	
	ТаблицаПроектовДляРассылки = ПолучитьПроектыДляРассылки();
	
	Для Каждого СтрокаТаблицы из ТаблицаПроектовДляРассылки Цикл
		
		Если СтрокаТаблицы.РассылатьУведомленияПоЗадачам Тогда
			ПроектыДляРассылкиПоЗадачам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
		Если СтрокаТаблицы.РассылатьУведомленияПоОшибкам Тогда
			ПроектыДляРассылкиПоОшибкам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
		Если СтрокаТаблицы.РассылатьУведомленияПоТехническимПроектам Тогда
			ПроектыДляРассылкиПоТехническимПроектам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
	КонецЦикла;
	
	РасположениеИБ = РасположениеИнформационнойБазы();
	
	АдресИБВЛокальнойСети = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВЛокальнойСети();
	АдресИБВИнтернет = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	
	ИспользоватьВнешниеСсылки = ЗначениеЗаполнено(АдресИБВЛокальнойСети) ИЛИ ЗначениеЗаполнено(АдресИБВИнтернет);
	
	ПараметрыРассылки = Новый Структура;
	ПараметрыРассылки.Вставить("ДатаПоследнейРассылки", ДатаПоследнейРассылки);
	ПараметрыРассылки.Вставить("ВерхняяГраницаПоДате", ВерхняяГраницаПоДате);
	ПараметрыРассылки.Вставить("РасположениеИБ", РасположениеИБ);
	ПараметрыРассылки.Вставить("АдресИБВЛокальнойСети", АдресИБВЛокальнойСети);
	ПараметрыРассылки.Вставить("АдресИБВИнтернет", АдресИБВИнтернет);
	ПараметрыРассылки.Вставить("ИспользоватьВнешниеСсылки", ИспользоватьВнешниеСсылки);
	
	ДобавитьУведомленияПоЗадачамПроцессов(ТаблицаСообщений, ПроектыДляРассылкиПоЗадачам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоНаправленнымОшибкам(ТаблицаСообщений, ПроектыДляРассылкиПоОшибкам, ПараметрыРассылки);
									
	ДобавитьУведомленияПоИсправленнымОшибкам(ТаблицаСообщений, ПроектыДляРассылкиПоОшибкам, ПараметрыРассылки);
									
	ДобавитьУведомленияПоСогласованиюТехническихПроектов(ТаблицаСообщений, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
									
	ДобавитьУведомленияПоДвижениюТехническихПроектов(ТаблицаСообщений, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
									
	ДобавитьУведомленияПоСтатусамТехническихПроектов(ТаблицаСообщений, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
	
	////////////////////////////////////////////////////////////////////////////////
	
	// Сортируем сообщения по дате рассылки
	ТаблицаСообщений.Сортировать("ДатаРассылки Возр");
	
	УчетнаяЗаписьСервера = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	// Если сообщение не удалось отправить в течение 3 попыток, в то же время другие сообщения
	// в этой рассылке были отправлены, то полагаем, что сообщение быть доставлено не может
	КоличествоПопытокОтправкиПочты = 3;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Начата отправка'") );
	
	Для НомерПопытки = 1 По КоличествоПопытокОтправкиПочты Цикл
		
		Если ТаблицаСообщений.Количество() = 0 Тогда
			Прервать;		// Сообщений для отправки нет
		КонецЕсли;
		// Отправляем сообщения в цикле
		Для Каждого Строка Из ТаблицаСообщений Цикл
			Если Строка.СообщениеОтправлено Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗаписьСервера, Строка.ПараметрыПисьма);
				РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗаписьСервера, Письмо);
				
				Строка.СообщениеОтправлено = Истина;
				Если Строка.ДатаРассылки > ДатаПоследнейРассылки Тогда
					ДатаПоследнейРассылки = Строка.ДатаРассылки;
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Ошибка,,ИнформацияОбОшибке().Описание);
			КонецПопытки;
		КонецЦикла; // Отправка сообщений
	КонецЦикла;     // Попытка отправить
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Завершена отправка'") );
	
	// Устанавливаем константу при необходимости
	Если ДатаПоследнейРассылки > Константы.ДатаПоследнейРассылки.Получить() Тогда
		Константы.ДатаПоследнейРассылки.Установить(ДатаПоследнейРассылки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСсылки(Макет, ТекстовыйДокумент, Ссылка, ПараметрыРассылки)
	
	Если ЗначениеЗаполнено(ПараметрыРассылки.АдресИБВЛокальнойСети) Тогда
		// Выводится ссылка в локальной сети
		Область = Макет.ПолучитьОбласть("Ссылка");
		Область.Параметры.ПредставлениеСсылки =
			НСтр("ru='Ссылка:'") + Символы.ПС
			+ НавигационнаяСсылкаДляУведомления(Ссылка, ПараметрыРассылки.АдресИБВЛокальнойСети);
			
		ТекстовыйДокумент.Вывести(Область);
	Иначе
		// Если не указан адрес в локальной сети и не указан внешний адре,
		// то выводится внутренняя ссылка.
		Если НЕ ЗначениеЗаполнено(ПараметрыРассылки.АдресИБВИнтернет) Тогда
			Область = Макет.ПолучитьОбласть("Ссылка");
			Область.Параметры.ПредставлениеСсылки =
				НСтр("ru='Ссылка:'") + Символы.ПС + ПолучитьНавигационнуюСсылку(Ссылка);
				
			ТекстовыйДокумент.Вывести(Область);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметрырассылки.АдресИБВИнтернет) Тогда
		// Выводится внешняя ссылка
		Область = Макет.ПолучитьОбласть("ВнешняяСсылка");
		Область.Параметры.ПредставлениеСсылки =
			НСтр("ru='Внешняя ссылка:'") + Символы.ПС
			+ НавигационнаяСсылкаДляУведомления(Ссылка, ПараметрыРассылки.АдресИБВИнтернет, Истина);
			
		ТекстовыйДокумент.Вывести(Область);
	КонецЕсли;
	
КонецПроцедуры

Функция НавигационнаяСсылкаДляУведомления(Ссылка, АдресПубликацииИБ, ВебПубликация=Ложь)
	
	АдресПубликацииИБ = СОКРЛП(АдресПубликацииИБ);
	
	Если ВебПубликация И Прав(АдресПубликацииИБ,1)<> "/" Тогда
		АдресПубликацииИБ = АдресПубликацииИБ + "/";
	КонецЕсли;
		
	Возврат АдресПубликацииИБ + "#" + ПолучитьНавигационнуюСсылку(Ссылка);
	
КонецФункции

// Добавляет в таблицу отправки почты уведомления по задачам процессов
Процедура ДобавитьУведомленияПоЗадачамПроцессов(ТаблицаСообщений, МассивПроектов, ПараметрыРассылки)

	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                           КАК Задача,
	|	ЗадачиПроцесса.Предмет.Наименование                             КАК НаименованиеВладельца,
	|	ЗадачиПроцесса.Предмет.Владелец.НаименованиеКонфигурации        КАК НаименованиеКонфигурации,
	|	ЗадачиПроцесса.Предмет.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ЗадачиПроцесса.Код                                              КАК Код,
	|	ЗадачиПроцесса.Описание                                         КАК Описание,
	|	ЗадачиПроцесса.Наименование                                     КАК Наименование,
	|	ЗадачиПроцессаПротоколВзаимодействия.Автор                      КАК Автор,
	|	ЗадачиПроцесса.Исполнитель                                      КАК Исполнитель,
	|	ЗадачиПроцесса.Статус                                           КАК Статус,
	|	ЗадачиПроцессаПротоколВзаимодействия.Дата                       КАК ДатаСоздания,
	|	ЗадачиПроцесса.КрайняяДатаОкончания                             КАК КрайняяДатаОкончания,
	|	ПользователиКонтактнаяИнформация.АдресЭП                        КАК АдресЭП
	|ИЗ
	|	Справочник.ЗадачиПроцесса.ПротоколВзаимодействия КАК ЗадачиПроцессаПротоколВзаимодействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиПроцессаПротоколВзаимодействия.Ссылка = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО (ЗадачиПроцесса.Исполнитель = ПерсональныеНастройкиУведомленийПользователей.Пользователь)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗадачиПроцесса.Исполнитель = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО (Пользователи.Ссылка = ПользователиКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	ЗадачиПроцессаПротоколВзаимодействия.НомерСтроки = 1
	|	И ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована)
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Исполнитель <> ЗадачиПроцессаПротоколВзаимодействия.Автор
	|	И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачИсполнителю
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И ЗадачиПроцессаПротоколВзаимодействия.Дата > &ДатаПоследнейРассылки
	|	И ЗадачиПроцессаПротоколВзаимодействия.Дата <= &ВерхняяГраницаПоДате
	|	И ЗадачиПроцесса.Предмет.Владелец В(&МассивПроектов)
	|	И ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|ИТОГИ ПО
	|	Задача";
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылки);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	ВыборкаЗадачи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		НаименованиеКонфигурации = "";
		
		Если ЗначениеЗаполнено(ВыборкаЗадачи.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = ВыборкаЗадачи.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
		
		Тема = СтрШаблон(НСтр("ru='%1 Запланирована задача %2'"),ПрефиксТемы,ВыборкаЗадачи.Наименование);
		
		РеквизитыЗадачи = Новый Структура;
		
		РеквизитыЗадачи.Вставить("Задача", ВыборкаЗадачи.Задача);
		РеквизитыЗадачи.Вставить("Статус", ВыборкаЗадачи.Статус);
		РеквизитыЗадачи.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());
		РеквизитыЗадачи.Вставить("Исполнитель", ВыборкаЗадачи.Исполнитель);
		РеквизитыЗадачи.Вставить("ДатаСоздания",  Дата(1,1,1));
		РеквизитыЗадачи.Вставить("КрайняяДатаОкончания", ВыборкаЗадачи.КрайняяДатаОкончания);
		РеквизитыЗадачи.Вставить("ОписаниеЗадачи", "");
		
		ОписаниеЗадачи = ВыборкаЗадачи.Описание.Получить();
		Если ТипЗнч(ОписаниеЗадачи) = Тип("ФорматированныйДокумент") Тогда
			РеквизитыЗадачи.ОписаниеЗадачи = ОписаниеЗадачи.ПолучитьТекст();
		КонецЕсли;
		
		МассивАдресовЭП = Новый Массив;
		
		ВыборкаДетали = ВыборкаЗадачи.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			НаименованиеКонфигурации = ВыборкаДетали.НаименованиеКонфигурации;
			РеквизитыЗадачи.ДатаСоздания = ВыборкаДетали.ДатаСоздания;
			РеквизитыЗадачи.Автор        =  ВыборкаДетали.Автор;
			
			Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ВыборкаДетали.АдресЭП, Ложь) Тогда
				Если МассивАдресовЭП.Найти(ВыборкаДетали.АдресЭП) = Неопределено Тогда
					МассивАдресовЭП.Добавить(ВыборкаДетали.АдресЭП);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивАдресовЭП.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаАдресатов = СтрСоединить(МассивАдресовЭП, ";");
		
		ТекстУведомления = ТекстУведомленияПоЗадачеПроцесса(НаименованиеКонфигурации, РеквизитыЗадачи, ПараметрыРассылки);
		
		ПараметрыПисьма = Новый Структура;
		
		ПараметрыПисьма.Вставить("Тема", СокрЛП(Тема));
		ПараметрыПисьма.Вставить("Кому", СтрокаАдресатов);
		ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		
		// Добавляем уведомление в таблицу
		Строка = ТаблицаСообщений.Добавить();
		Строка.ДатаРассылки         = РеквизитыЗадачи.ДатаСоздания;
		Строка.ПараметрыПисьма      = ПараметрыПисьма;
		Строка.СообщениеОтправлено  = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу отправки почты уведомления по ошибкам, направленным пользователям
Процедура ДобавитьУведомленияПоНаправленнымОшибкам(ТаблицаСообщений, МассивПроектов, ПараметрыРассылки)

	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ОшибкиПротокол.Дата КАК ДатаНаправленияИсполнителю,
	|	ОшибкиПротокол.Ссылка КАК Ошибка,
	|	ОшибкиПротокол.Ссылка.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	ОшибкиПротокол.Ссылка.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ОшибкиПротокол.КомуНаправлена КАК КомуНаправлена,
	|	ОшибкиПротокол.Комментарий КАК Комментарий,
	|	ОшибкиПротокол.Ссылка.Код КАК Код,
	|	ОшибкиПротокол.Ссылка.Наименование КАК Наименование,
	|	ОшибкиПротокол.Ссылка.Владелец КАК Проект,
	|	ОшибкиПротокол.Ссылка.Статус КАК Статус,
	|	ОшибкиПротокол.Ссылка.ПорядокВоспроизведения КАК ПорядокВоспроизведения,
	|	ОшибкиПротокол.Ссылка.СрочностьИсправления КАК СрочностьИсправления,
	|	Пользователи.АдресЭлектроннойПочты КАК АдресИсполнителя
	|ИЗ
	|	Справочник.Ошибки.Протокол КАК ОшибкиПротокол
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО ОшибкиПротокол.КомуНаправлена = Пользователи.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО ОшибкиПротокол.КомуНаправлена = ПерсональныеНастройкиУведомленийПользователей.Пользователь И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииОшибокИсполнителю
	|ГДЕ
	|	ОшибкиПротокол.Ссылка.Владелец В(&МассивПроектов)
	|	И НЕ ОшибкиПротокол.Ссылка.ПометкаУдаления
	|	И ОшибкиПротокол.НомерСтроки = 1
	|	И ОшибкиПротокол.Дата > &ДатаПоследнейРассылки
	|	И ОшибкиПротокол.Дата <= &ВерхняяГраницаПоДате
	|	И НЕ ОшибкиПротокол.КомуНаправлена.ПометкаУдаления
	|	И НЕ ОшибкиПротокол.КомуНаправлена.Недействителен
	|	И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииОшибокИсполнителю
	|	И НЕ ОшибкиПротокол.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|	И ОшибкиПротокол.КомуНаправлена <> ОшибкиПротокол.Автор"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылки);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = Выборка.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = Выборка.НаименованиеКонфигурации;
		
		РеквизитыОшибки = Новый Структура();
		
		РеквизитыОшибки.Вставить("Ошибка", Выборка.Ошибка);
		РеквизитыОшибки.Вставить("Статус", Выборка.Статус);
		РеквизитыОшибки.Вставить("СрочностьИсправления", Выборка.СрочностьИсправления);
		РеквизитыОшибки.Вставить("КомуНаправлена", Выборка.КомуНаправлена);
		РеквизитыОшибки.Вставить("Комментарий", Выборка.Комментарий);
		РеквизитыОшибки.Вставить("Код", Выборка.Код);
		РеквизитыОшибки.Вставить("Наименование", Выборка.Наименование);
		РеквизитыОшибки.Вставить("ПорядокВоспроизведения", Выборка.ПорядокВоспроизведения);
		
		ТекстУведомления = ТекстУведомленияПоНаправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки);
		
		// Формирование уведомления исполнителю по ошибке
		Если ЗначениеЗаполнено(Выборка.АдресИсполнителя) Тогда
			
			Тема = ПрефиксТемы + НСтр("ru='Вам направлена ошибка %Код% %Наименование%'");
			
			Тема = СтрЗаменить(Тема, "%Код%", Выборка.Код);
			Тема = СтрЗаменить(Тема, "%Наименование%", Выборка.Наименование);
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", СокрЛП(Тема));
			ПараметрыПисьма.Вставить("Кому", Выборка.АдресИсполнителя);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщений.Добавить();
			Строка.ДатаРассылки 				= Выборка.ДатаНаправленияИсполнителю;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу отправки почты уведомления по исправленным ошибкам, зарегистрированным пользователями
Процедура ДобавитьУведомленияПоИсправленнымОшибкам(ТаблицаСообщений, МассивПроектов, ПараметрыРассылки)

	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	Ошибки.ДатаИсправления КАК ДатаИсправления,
	|	Ошибки.Ссылка КАК Ошибка,
	|	Ошибки.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	Ошибки.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	Ошибки.Код КАК Код,
	|	Ошибки.Наименование КАК Наименование,
	|	Ошибки.Владелец КАК Проект,
	|	Ошибки.Статус КАК Статус,
	|	Ошибки.ПорядокВоспроизведения КАК ПорядокВоспроизведения,
	|	Ошибки.СрочностьИсправления КАК СрочностьИсправления,
	|	Пользователи.АдресЭлектроннойПочты КАК АдресИсполнителя
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО Ошибки.Зарегистрировал = Пользователи.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО Ошибки.Зарегистрировал = ПерсональныеНастройкиУведомленийПользователей.Пользователь И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем
	|ГДЕ
	|	Ошибки.Владелец В(&МассивПроектов)
	|	И НЕ Ошибки.ПометкаУдаления
	|   И Ошибки.Исправлена
	|	И Ошибки.ДатаИсправления > &ДатаПоследнейРассылки
	|	И Ошибки.ДатаИсправления <= &ВерхняяГраницаПоДате
	|	И НЕ Ошибки.Зарегистрировал.ПометкаУдаления
	|	И НЕ Ошибки.Зарегистрировал.Недействителен
	|	И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем
	|	И Ошибки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана)
	|	И Ошибки.Исправил <> Ошибки.Зарегистрировал"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылки);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = Выборка.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = Выборка.НаименованиеКонфигурации;
		
		РеквизитыОшибки = Новый Структура();
		
		РеквизитыОшибки.Вставить("Ошибка", Выборка.Ошибка);
		РеквизитыОшибки.Вставить("Статус", Выборка.Статус);
		РеквизитыОшибки.Вставить("СрочностьИсправления", Выборка.СрочностьИсправления);
		РеквизитыОшибки.Вставить("Код", Выборка.Код);
		РеквизитыОшибки.Вставить("Наименование", Выборка.Наименование);
		РеквизитыОшибки.Вставить("ПорядокВоспроизведения", Выборка.ПорядокВоспроизведения);
		
		ТекстУведомления = ТекстУведомленияПоИсправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки);
		
		// Формирование уведомления исполнителю по ошибке
		Если ЗначениеЗаполнено(Выборка.АдресИсполнителя) Тогда
			
			Тема = ПрефиксТемы + НСтр("ru='Исправлена ошибка '");
			
			Тема = Тема + Выборка.Наименование;
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", СокрЛП(Тема));
			ПараметрыПисьма.Вставить("Кому", Выборка.АдресИсполнителя);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщений.Добавить();
			Строка.ДатаРассылки 				= Выборка.ДатаИсправления;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу отправки почты уведомления по прохождению контрольных точек технических проектов
Процедура ДобавитьУведомленияПоДвижениюТехническихПроектов(ТаблицаСообщений, МассивПроектов, ПараметрыРассылки)
	
	// Определяем технические проекты, у которых срок прохождения пройденных контрольных точек 
	// позднее даты последней рассылки, которые не помечены на удаление
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	УведомленияПользователей.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.НастройкиУведомленийПользователей КАК УведомленияПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО УведомленияПользователей.Пользователь = Пользователи.Пользователь
	|ГДЕ
	|	УведомленияПользователей.УведомлятьОХодеВыполненияТехническихПроектов
	|	И НЕ УведомленияПользователей.Пользователь.ПометкаУдаления
	|	И НЕ УведомленияПользователей.Пользователь.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапросПоПройденнымТочкам.КонтрольнаяТочка КАК КонтрольнаяТочка,
	|	ТехническиеПроектыКонтрольныеТочки.СрокПрохождения КАК СрокПрохождения,
	|	ТехническиеПроекты.Наименование КАК Наименование,
	|	ТехническиеПроекты.Владелец КАК Проект,
	|	ТехническиеПроекты.Ответственный КАК Ответственный,
	|	ТехническиеПроекты.Очередность КАК Очередность,
	|	ТехническиеПроекты.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК ПлановаяДатаОкончания,
	|	ТехническиеПроекты.ЦелиПроекта КАК ЦелиПроекта,
	|	ТехническиеПроекты.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	ТехническиеПроекты.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ТехническиеПроекты.КонтрольныеТочки.(
	|		КонтрольнаяТочка КАК КонтрольнаяТочка,
	|		Статус КАК Статус,
	|		СрокПрохождения КАК СрокПрохождения,
	|		НомерСтроки
	|	),
	|	ТехническиеПроекты.Участники.(
	|		Участник КАК Участник,
	|		НомерСтроки
	|	),
	|	ТехническиеПроектыКонтрольныеТочки.НомерСтроки КАК НомерСтроки,
	|	ЗапросПоПройденнымТочкам.ТехническийПроект КАК ТехническийПроект
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ТехническиеПроектыКонтрольныеТочки.НомерСтроки) КАК НомерСтроки,
	|		ТехническиеПроектыКонтрольныеТочки.Ссылка КАК ТехническийПроект,
	|		ТехническиеПроектыКонтрольныеТочки.КонтрольнаяТочка КАК КонтрольнаяТочка
	|	ИЗ
	|		Справочник.ТехническиеПроекты.КонтрольныеТочки КАК ТехническиеПроектыКонтрольныеТочки
	|	ГДЕ
	|		НЕ ТехническиеПроектыКонтрольныеТочки.Ссылка.ПометкаУдаления
	|		И ТехническиеПроектыКонтрольныеТочки.Ссылка.Владелец В(&МассивПроектов)
	|		И ТехническиеПроектыКонтрольныеТочки.СрокПрохождения > &ДатаПоследнейРассылки
	|		И ТехническиеПроектыКонтрольныеТочки.СрокПрохождения <= &ВерхняяГраницаПоДате
	|		И ТехническиеПроектыКонтрольныеТочки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКонтрольныхТочекТехническихПроектов.Пройдена)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТехническиеПроектыКонтрольныеТочки.КонтрольнаяТочка,
	|		ТехническиеПроектыКонтрольныеТочки.Ссылка) КАК ЗапросПоПройденнымТочкам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты.КонтрольныеТочки КАК ТехническиеПроектыКонтрольныеТочки
	|		ПО ЗапросПоПройденнымТочкам.ТехническийПроект = ТехническиеПроектыКонтрольныеТочки.Ссылка
	|			И ЗапросПоПройденнымТочкам.НомерСтроки = ТехническиеПроектыКонтрольныеТочки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗапросПоПройденнымТочкам.ТехническийПроект = ТехническиеПроекты.Ссылка
	|ГДЕ
	|	НЕ ЗапросПоПройденнымТочкам.ТехническийПроект.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехническийПроект"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылки);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПолучателей = МассивРезультатов[0].Выгрузить();
	ВыборкаПроектов = МассивРезультатов[1].Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока ВыборкаПроектов.Следующий() Цикл
				
		Если ЗначениеЗаполнено(ВыборкаПроектов.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = ВыборкаПроектов.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = ВыборкаПроектов.НаименованиеКонфигурации;
		
		ТекущийПроект = ВыборкаПроектов.ТехническийПроект;
		
		РеквизитыПроекта = Новый Структура();
					
		РеквизитыПроекта.Вставить("Наименование", ВыборкаПроектов.Наименование);
		РеквизитыПроекта.Вставить("ЦелиПроекта", ВыборкаПроектов.ЦелиПроекта);
		РеквизитыПроекта.Вставить("Ответственный", ВыборкаПроектов.Ответственный);
		РеквизитыПроекта.Вставить("Очередность", ВыборкаПроектов.Очередность);
		РеквизитыПроекта.Вставить("ПлановаяДатаНачала", ВыборкаПроектов.ПлановаяДатаНачала);
		РеквизитыПроекта.Вставить("ПлановаяДатаОкончания", ВыборкаПроектов.ПлановаяДатаОкончания);
		РеквизитыПроекта.Вставить("ПройденнаяКонтрольнаяТочка", ВыборкаПроектов.КонтрольнаяТочка);
		
		ТаблицаКонтрольныхТочек = ВыборкаПроектов.КонтрольныеТочки.Выгрузить();
		ТаблицаУчастников = ВыборкаПроектов.Участники.Выгрузить();
		
		ТаблицаКонтрольныхТочек.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Свернуть("Участник");
		
		ТекстУведомления = ТекстУведомленияПоДвижениюТехническогоПроекта(НаименованиеКонфигурации,
																 ВыборкаПроектов.ТехническийПроект,
																 РеквизитыПроекта,
																 ТаблицаКонтрольныхТочек,
																 ТаблицаУчастников,
																 ПараметрыРассылки);
				
		Тема = ПрефиксТемы + Строка(ВыборкаПроектов.КонтрольнаяТочка) + ": " + ВыборкаПроектов.Наименование;
		
		СтруктураПоиска = Новый Структура("Проект", ВыборкаПроектов.Проект);
		
		МассивСтрокТаблицыПолучаталей = ТаблицаПолучателей.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаПолучателя из МассивСтрокТаблицыПолучаталей Цикл
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", Тема);
			ПараметрыПисьма.Вставить("Кому", СтрокаПолучателя.АдресЭлектроннойПочты);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщений.Добавить();
			Строка.ДатаРассылки 				= ВыборкаПроектов.СрокПрохождения;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу отправки почты уведомления по факту изменения статусов технических проектов
Процедура ДобавитьУведомленияПоСтатусамТехническихПроектов(ТаблицаСообщений, МассивПроектов, ПараметрыРассылки)
	
	// Определяем технические проекты, у которых срок прохождения пройденных контрольных точек 
	// позднее даты последней рассылки, которые не помечены на удаление
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	УведомленияПользователей.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.НастройкиУведомленийПользователей КАК УведомленияПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО УведомленияПользователей.Пользователь = Пользователи.Пользователь
	|ГДЕ
	|	УведомленияПользователей.УведомлятьОбИзмененииСтатусовТехническихПроектов
	|	И НЕ УведомленияПользователей.Пользователь.ПометкаУдаления
	|	И НЕ УведомленияПользователей.Пользователь.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект,
	|	ТехническиеПроекты.Наименование КАК Наименование,
	|	ТехническиеПроекты.Владелец КАК Проект,
	|	ТехническиеПроекты.Ответственный КАК Ответственный,
	|	ТехническиеПроекты.Очередность КАК Очередность,
	|	ТехническиеПроекты.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК ПлановаяДатаОкончания,
	|	ТехническиеПроекты.ЦелиПроекта КАК ЦелиПроекта,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
	|	ТехническиеПроекты.Статус КАК Статус,
	|	ТехническиеПроекты.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	ТехническиеПроекты.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ТехническиеПроекты.КонтрольныеТочки.(
	|		КонтрольнаяТочка КАК КонтрольнаяТочка,
	|		Статус КАК Статус,
	|		СрокПрохождения КАК СрокПрохождения,
	|		НомерСтроки
	|	),
	|	ТехническиеПроекты.Участники.(
	|		Участник КАК Участник,
	|		НомерСтроки
	|	)
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Владелец В(&МассивПроектов)
	|	И ТехническиеПроекты.ДатаИзмененияСтатуса > &ДатаПоследнейРассылки
	|	И ТехническиеПроекты.ДатаИзмененияСтатуса <= &ВерхняяГраницаПоДате
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехническийПроект"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылки);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПолучателей = МассивРезультатов[0].Выгрузить();
	ВыборкаПроектов = МассивРезультатов[1].Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока ВыборкаПроектов.Следующий() Цикл
				
		Если ЗначениеЗаполнено(ВыборкаПроектов.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = ВыборкаПроектов.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = ВыборкаПроектов.НаименованиеКонфигурации;
		
		ТекущийПроект = ВыборкаПроектов.ТехническийПроект;
		
		РеквизитыПроекта = Новый Структура();
					
		РеквизитыПроекта.Вставить("Наименование", ВыборкаПроектов.Наименование);
		РеквизитыПроекта.Вставить("ЦелиПроекта", ВыборкаПроектов.ЦелиПроекта);
		РеквизитыПроекта.Вставить("Ответственный", ВыборкаПроектов.Ответственный);
		РеквизитыПроекта.Вставить("Очередность", ВыборкаПроектов.Очередность);
		РеквизитыПроекта.Вставить("ПлановаяДатаНачала", ВыборкаПроектов.ПлановаяДатаНачала);
		РеквизитыПроекта.Вставить("ПлановаяДатаОкончания", ВыборкаПроектов.ПлановаяДатаОкончания);
		РеквизитыПроекта.Вставить("Статус", ВыборкаПроектов.Статус);
		
		
		ТаблицаКонтрольныхТочек = ВыборкаПроектов.КонтрольныеТочки.Выгрузить();
		ТаблицаУчастников = ВыборкаПроектов.Участники.Выгрузить();
		
		ТаблицаКонтрольныхТочек.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Свернуть("Участник");
		
		ТекстУведомления = ТекстУведомленияПоСтатусамТехническогоПроекта(НаименованиеКонфигурации,
																 ВыборкаПроектов.ТехническийПроект,
																 РеквизитыПроекта,
																 ТаблицаКонтрольныхТочек,
																 ТаблицаУчастников,
																 ПараметрыРассылки);
				
		Тема = ПрефиксТемы + " " +  НСтр("ru='Установлен статус'") + " "
				+ ВыборкаПроектов.Статус + " " + НСтр("ru='для технического проекта'") + " " + ВыборкаПроектов.Наименование;
		
		СтруктураПоиска = Новый Структура("Проект", ВыборкаПроектов.Проект);
		
		МассивСтрокТаблицыПолучаталей = ТаблицаПолучателей.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаПолучателя из МассивСтрокТаблицыПолучаталей Цикл
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", Тема);
			ПараметрыПисьма.Вставить("Кому", СтрокаПолучателя.АдресЭлектроннойПочты);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщений.Добавить();
			Строка.ДатаРассылки 				= ВыборкаПроектов.ДатаИзмененияСтатуса;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу отправки почты уведомления по согласованию технических проектов
Процедура ДобавитьУведомленияПоСогласованиюТехническихПроектов(ТаблицаСообщений, МассивПроектов, ПараметрыРассылки)
	
	// Определяем технические проекты, у которых Дата подготовки к согласованию или дата не согласования
	// позднее даты последней рассылки, которые не помечены на удаление
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СогласованиеТехническихПроектов.ТехническийПроект КАК ТехническийПроект,
	|	СогласованиеТехническихПроектов.Согласующий КАК Согласующий,
	|	СогласованиеТехническихПроектов.РольСогласующего КАК РольСогласующего,
	|	СогласованиеТехническихПроектов.СтатусСогласования КАК СтатусСогласования,
	|	СогласованиеТехническихПроектов.Установил КАК Установил,
	|	СогласованиеТехническихПроектов.Период КАК Дата,
	|	СогласованиеТехническихПроектов.Комментарий КАК Комментарий,
	|	ТехническиеПроектыКонтрольныеТочки.КонтрольнаяТочка КАК КонтрольнаяТочка,
	|	ТехническиеПроектыКонтрольныеТочки.КонтрольнаяТочка.Код КАК КодКонтрольнойТочки,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Наименование КАК Наименование,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Владелец КАК Проект,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Ответственный КАК Ответственный,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Очередность КАК Очередность,
	|	СогласованиеТехническихПроектов.ТехническийПроект.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
	|	СогласованиеТехническихПроектов.ТехническийПроект.ПлановаяДатаОкончания КАК ПлановаяДатаОкончания,
	|	СогласованиеТехническихПроектов.ТехническийПроект.ЦелиПроекта КАК ЦелиПроекта,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭлектроннойПочты,
	|	СогласованиеТехническихПроектов.ТехническийПроект.КонтрольныеТочки.(
	|		КонтрольнаяТочка КАК КонтрольнаяТочка,
	|		Статус КАК Статус,
	|		СрокПрохождения КАК СрокПрохождения,
	|		НомерСтроки КАК НомерСтроки
	|	) КАК КонтрольныеТочки,
	|	СогласованиеТехническихПроектов.ТехническийПроект.Участники.(
	|		Участник КАК Участник,
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Участники
	|ИЗ
	|	РегистрСведений.СогласованиеТехническихПроектов КАК СогласованиеТехническихПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО (СогласованиеТехническихПроектов.Согласующий = ПерсональныеНастройкиУведомленийПользователей.Пользователь
	|				ИЛИ СогласованиеТехническихПроектов.ТехническийПроект.Ответственный = ПерсональныеНастройкиУведомленийПользователей.Пользователь
	|					И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОСогласованииТехническихПроектов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты.КонтрольныеТочки КАК ТехническиеПроектыКонтрольныеТочки
	|		ПО СогласованиеТехническихПроектов.КлючСтрокиКонтрольнойТочки = ТехническиеПроектыКонтрольныеТочки.КлючСтроки
	|			И СогласованиеТехническихПроектов.ТехническийПроект = ТехническиеПроектыКонтрольныеТочки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО (СогласованиеТехническихПроектов.Согласующий = ПользователиКонтактнаяИнформация.Ссылка
	|					И СогласованиеТехническихПроектов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию)
	|				ИЛИ СогласованиеТехническихПроектов.ТехническийПроект.Ответственный = ПользователиКонтактнаяИнформация.Ссылка
	|					И СогласованиеТехническихПроектов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияТехническихПроектов.НеСогласовано))
	|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
	|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	НЕ СогласованиеТехническихПроектов.ТехническийПроект.ПометкаУдаления
	|	И СогласованиеТехническихПроектов.ТехническийПроект.Владелец В(&МассивПроектов)
	|	И СогласованиеТехническихПроектов.Период > &ДатаПоследнейРассылки
	|	И СогласованиеТехническихПроектов.Период <= &ВерхняяГраницаПоДате
	|	И (СогласованиеТехническихПроектов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию)
	|				И СогласованиеТехническихПроектов.Согласующий = ПерсональныеНастройкиУведомленийПользователей.Пользователь
	|				И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОСогласованииТехническихПроектов
	|			ИЛИ СогласованиеТехническихПроектов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияТехническихПроектов.НеСогласовано)
	|				И СогласованиеТехническихПроектов.ТехническийПроект.Ответственный = ПерсональныеНастройкиУведомленийПользователей.Пользователь
	|				И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОСогласованииТехническихПроектов)
	|	И НЕ ПользователиКонтактнаяИнформация.АдресЭП ПОДОБНО """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехническийПроект,
	|	Дата"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылки);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока Выборка.Следующий() Цикл
				
		Если ЗначениеЗаполнено(Выборка.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = Выборка.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = Выборка.НаименованиеКонфигурации;
		
		ТекущийПроект = Выборка.ТехническийПроект;
		
		Реквизиты = Новый Структура();
					
		Реквизиты.Вставить("Наименование", Выборка.Наименование);
		Реквизиты.Вставить("ЦелиПроекта", Выборка.ЦелиПроекта);
		Реквизиты.Вставить("Ответственный", Выборка.Ответственный);
		Реквизиты.Вставить("Очередность", Выборка.Очередность);
		Реквизиты.Вставить("ПлановаяДатаНачала", Выборка.ПлановаяДатаНачала);
		Реквизиты.Вставить("ПлановаяДатаОкончания", Выборка.ПлановаяДатаОкончания);
		Реквизиты.Вставить("КонтрольнаяТочка", Выборка.КонтрольнаяТочка);
		Реквизиты.Вставить("Согласующий", Выборка.Согласующий);
		Реквизиты.Вставить("СтатусСогласования", Выборка.СтатусСогласования);
		Реквизиты.Вставить("Установил", Выборка.Установил);
		Реквизиты.Вставить("Дата", Выборка.Дата);
		Реквизиты.Вставить("Комментарий", Выборка.Комментарий);
		
		ТаблицаКонтрольныхТочек = Выборка.КонтрольныеТочки.Выгрузить();
		ТаблицаУчастников = Выборка.Участники.Выгрузить();
		
		ТаблицаКонтрольныхТочек.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Свернуть("Участник");
		
		ТекстУведомления = ТекстУведомленияПоСогласованиюТехническогоПроекта(НаименованиеКонфигурации,
																 Выборка.ТехническийПроект,
																 Реквизиты,
																 ТаблицаКонтрольныхТочек,
																 ТаблицаУчастников,
																 ПараметрыРассылки);
																 
		Тема = "";
		
		Если Выборка.СтатусСогласования = Перечисления.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию Тогда
			Тема = ПрефиксТемы + НСтр("ru='Готово к согласованию: '") + Выборка.Наименование + ". " + Строка(Выборка.КонтрольнаяТочка);
		ИначеЕсли Выборка.СтатусСогласования = Перечисления.СтатусыСогласованияТехническихПроектов.НеСогласовано Тогда
			Тема = ПрефиксТемы + НСтр("ru='НЕ СОГЛАСОВАНО: '") + Выборка.Наименование + ". " + Строка(Выборка.КонтрольнаяТочка);
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура;
			
		ПараметрыПисьма.Вставить("Тема", Тема);
		ПараметрыПисьма.Вставить("Кому", Выборка.АдресЭлектроннойПочты);
		ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
		// Добавляем уведомление в таблицу
		Строка = ТаблицаСообщений.Добавить();
		Строка.ДатаРассылки 				= Выборка.Дата;
		Строка.ПараметрыПисьма 				= ПараметрыПисьма;
		Строка.СообщениеОтправлено 			= Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПроектыДляРассылки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.РассылатьУведомленияПоТехническимПроектам КАК РассылатьУведомленияПоТехническимПроектам,
	|	Проекты.РассылатьУведомленияПоЗадачам КАК РассылатьУведомленияПоЗадачам,
	|	Проекты.РассылатьУведомленияПоОшибкам КАК РассылатьУведомленияПоОшибкам
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И (Проекты.РассылатьУведомленияПоТехническимПроектам
	|			ИЛИ Проекты.РассылатьУведомленияПоЗадачам
	|			ИЛИ Проекты.РассылатьУведомленияПоОшибкам)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстУведомленияПоЗадачеПроцесса(НаименованиеКонфигурации, РеквизитыЗадачи, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.ЗадачиПроцесса.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Уведомление");
	
	Область.Параметры.Конфигурация         = НаименованиеКонфигурации;
	Область.Параметры.СтатусЗадачи         = РеквизитыЗадачи.Статус;
	Область.Параметры.Автор                = РеквизитыЗадачи.Автор;
	Область.Параметры.Исполнитель          = РеквизитыЗадачи.Исполнитель;
	Область.Параметры.ДатаСоздания         = Формат(РеквизитыЗадачи.ДатаСоздания, "ДЛФ=D");
	Область.Параметры.КрайняяДатаОкончания = Формат(РеквизитыЗадачи.КрайняяДатаОкончания, "ДЛФ=D");
	
	ТекстовоеОписание.Вывести(Область);
	
	ВывестиСсылки(Макет, ТекстовоеОписание, РеквизитыЗадачи.Задача, ПараметрыРассылки);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ОписаниеЗадачи");
	
	Область.Параметры.ОписаниеЗадачи = РеквизитыЗадачи.ОписаниеЗадачи;
	
	ТекстовоеОписание.Вывести(Область);
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

Функция ТекстУведомленияПоНаправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.Ошибки.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Уведомление");
	
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.СтатусОшибки = РеквизитыОшибки.Статус;
	Область.Параметры.Код = РеквизитыОшибки.Код;
	Область.Параметры.Наименование = РеквизитыОшибки.Наименование;
	Область.Параметры.СрочностьИсправления = РеквизитыОшибки.СрочностьИсправления;
	
	ТекстовоеОписание.Вывести(Область);
	
	ВывестиСсылки(Макет, ТекстовоеОписание, РеквизитыОшибки.Ошибка, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.ПорядокВоспроизведения) Тогда
		Область = Макет.ПолучитьОбласть("ПорядокВоспроизведения");
		Область.Параметры.ПорядокВоспроизведения = РеквизитыОшибки.ПорядокВоспроизведения;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("КомментарийНаправившего");
		Область.Параметры.Комментарий = РеквизитыОшибки.Комментарий;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

Функция ТекстУведомленияПоИсправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.Ошибки.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Уведомление");
	
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.СтатусОшибки = РеквизитыОшибки.Статус;
	Область.Параметры.Код = РеквизитыОшибки.Код;
	Область.Параметры.Наименование = РеквизитыОшибки.Наименование;
	Область.Параметры.СрочностьИсправления = РеквизитыОшибки.СрочностьИсправления;
	
	ТекстовоеОписание.Вывести(Область);
	
	ВывестиСсылки(Макет, ТекстовоеОписание, РеквизитыОшибки.Ошибка, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.ПорядокВоспроизведения) Тогда
		Область = Макет.ПолучитьОбласть("ПорядокВоспроизведения");
		Область.Параметры.ПорядокВоспроизведения = РеквизитыОшибки.ПорядокВоспроизведения;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

// Формируети возвращает текстовое описание для уведомления по движению технического проекта
//
// Параметры:
// НаименованиеКонфигурации - строка, содержащая наименование конфигурации
//  ТехническийПроект - ссылка на технический проект
//  РеквизитыПроекта - Структура, содержащая значения реквизитов шапки проекта. Ключи структуры соответствуют именам реквизитов
//  ТаблицаКонтрольныхТочек - таблица значений, содержащая информацию о контрольных точках
//  ТаблицаУчастников - таблица значений, содержащая информацию об участниках проекта
//  РасположениеИБ - строка с описанием расположения текущей информационной базы
//
// Возвращаемое значение:
//  Описание - строка, содержащая текст уведомления
//
Функция ТекстУведомленияПоДвижениюТехническогоПроекта(НаименованиеКонфигурации, ТехническийПроект, РеквизитыПроекта, ТаблицаКонтрольныхТочек, ТаблицаУчастников, ПараметрыРассылки)
		
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.ТехническиеПроекты.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.ТехническийПроект = РеквизитыПроекта.Наименование;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПройденнаяКонтрольнаяТочка");
	Область.Параметры.ПройденнаяКонтрольнаяТочка = РеквизитыПроекта.ПройденнаяКонтрольнаяТочка;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Цели");
	Область.Параметры.ЦелиПроекта = РеквизитыПроекта.ЦелиПроекта;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Планирование");
	Область.Параметры.Ответственный = РеквизитыПроекта.Ответственный;
	Область.Параметры.ПлановаяДатаНачала = Формат(РеквизитыПроекта.ПлановаяДатаНачала, "ДЛФ=D");
	Область.Параметры.ПлановаяДатаОкончания = Формат(РеквизитыПроекта.ПлановаяДатаОкончания, "ДЛФ=D");
	Область.Параметры.Очередность = РеквизитыПроекта.Очередность;
	ТекстовоеОписание.Вывести(Область);
	
	Если ТаблицаУчастников.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("УчастникиЗаголовок");
		ТекстовоеОписание.Вывести(Область);
		
		Для Каждого СтрокаТаблицы из ТаблицаУчастников Цикл
			Область = Макет.ПолучитьОбласть("УчастникиСтрока");
			Область.Параметры.Участник = СтрокаТаблицы.Участник;
			ТекстовоеОписание.Вывести(Область);
		КонецЦикла;
		
	КонецЕсли;
	
	ВыведенЗаголовокКонтрольныхТочек = Ложь;
	
	Для Каждого СтрокаТаблицы из ТаблицаКонтрольныхТочек Цикл
		
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Пропущена Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыведенЗаголовокКонтрольныхТочек Тогда
			Область = Макет.ПолучитьОбласть("КонтрольныеТочкиЗаголовок");
			ТекстовоеОписание.Вывести(Область);
			ВыведенЗаголовокКонтрольныхТочек = Истина;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("КонтрольныеТочкиСтрока");
		СрокПрохождения = Формат(СтрокаТаблицы.СрокПрохождения, "ДЛФ=D");
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Назначена И (НЕ ЗначениеЗаполнено(СтрокаТаблицы.СрокПрохождения)) Тогда
			Область.Параметры.ОписаниеКонтрольнойТочки = Строка(СтрокаТаблицы.КонтрольнаяТочка)+ ": " + "Срок не назначен";
		Иначе
			Область.Параметры.ОписаниеКонтрольнойТочки = Строка(СтрокаТаблицы.КонтрольнаяТочка)+ ": " + СрокПрохождения + "," + СтрокаТаблицы.Статус;
		КонецЕсли;
		
		ТекстовоеОписание.Вывести(Область);
		
	КонецЦикла;
	
	ВывестиСсылки(Макет, ТекстовоеОписание, ТехническийПроект, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

// Формируети возвращает текстовое описание для уведомления по изменению статуса технического проекта
//
// Параметры:
// НаименованиеКонфигурации - строка, содержащая наименование конфигурации
//  ТехническийПроект - ссылка на технический проект
//  РеквизитыПроекта - Структура, содержащая значения реквизитов шапки проекта. Ключи структуры соответствуют именам реквизитов
//  ТаблицаКонтрольныхТочек - таблица значений, содержащая информацию о контрольных точках
//  ТаблицаУчастников - таблица значений, содержащая информацию об участниках проекта
//  РасположениеИБ - строка с описанием расположения текущей информационной базы
//
// Возвращаемое значение:
//  Описание - строка, содержащая текст уведомления
//
Функция ТекстУведомленияПоСтатусамТехническогоПроекта(НаименованиеКонфигурации, ТехническийПроект, РеквизитыПроекта, ТаблицаКонтрольныхТочек, ТаблицаУчастников, ПараметрыРассылки)
		
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.ТехническиеПроекты.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.ТехническийПроект = РеквизитыПроекта.Наименование;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("СтатусТехническогоПроекта");
	Область.Параметры.СтатусТехническогоПроекта = РеквизитыПроекта.Статус;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Цели");
	Область.Параметры.ЦелиПроекта = РеквизитыПроекта.ЦелиПроекта;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Планирование");
	Область.Параметры.Ответственный = РеквизитыПроекта.Ответственный;
	Область.Параметры.ПлановаяДатаНачала = Формат(РеквизитыПроекта.ПлановаяДатаНачала, "ДЛФ=D");
	Область.Параметры.ПлановаяДатаОкончания = Формат(РеквизитыПроекта.ПлановаяДатаОкончания, "ДЛФ=D");
	Область.Параметры.Очередность = РеквизитыПроекта.Очередность;
	ТекстовоеОписание.Вывести(Область);
	
	Если ТаблицаУчастников.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("УчастникиЗаголовок");
		ТекстовоеОписание.Вывести(Область);
		
		Для Каждого СтрокаТаблицы из ТаблицаУчастников Цикл
			Область = Макет.ПолучитьОбласть("УчастникиСтрока");
			Область.Параметры.Участник = СтрокаТаблицы.Участник;
			ТекстовоеОписание.Вывести(Область);
		КонецЦикла;
		
	КонецЕсли;
	
	ВыведенЗаголовокКонтрольныхТочек = Ложь;
	
	Для Каждого СтрокаТаблицы из ТаблицаКонтрольныхТочек Цикл
		
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Пропущена Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыведенЗаголовокКонтрольныхТочек Тогда
			Область = Макет.ПолучитьОбласть("КонтрольныеТочкиЗаголовок");
			ТекстовоеОписание.Вывести(Область);
			ВыведенЗаголовокКонтрольныхТочек = Истина;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("КонтрольныеТочкиСтрока");
		СрокПрохождения = Формат(СтрокаТаблицы.СрокПрохождения, "ДЛФ=D");
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Назначена И (НЕ ЗначениеЗаполнено(СтрокаТаблицы.СрокПрохождения)) Тогда
			Область.Параметры.ОписаниеКонтрольнойТочки = Строка(СтрокаТаблицы.КонтрольнаяТочка)+ ": " + "Срок не назначен";
		Иначе
			Область.Параметры.ОписаниеКонтрольнойТочки = Строка(СтрокаТаблицы.КонтрольнаяТочка)+ ": " + СрокПрохождения + "," + СтрокаТаблицы.Статус;
		КонецЕсли;
		
		ТекстовоеОписание.Вывести(Область);
		
	КонецЦикла;
	
	ВывестиСсылки(Макет, ТекстовоеОписание, ТехническийПроект, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

// Формируети возвращает текстовое описание для уведомления по техническому проекту
//
// Параметры:
// НаименованиеКонфигурации - строка, содержащая наименование конфигурации
//  ТехническийПроект - ссылка на технический проект
//  РеквизитыПроекта - Структура, содержащая значения реквизитов шапки проекта. Ключи структуры соответствуют именам реквизитов
//  РасположениеИБ - строка с описанием расположения текущей информационной базы
//
// Возвращаемое значение:
//  Описание - строка, содержащая текст уведомления
Функция ТекстУведомленияПоСогласованиюТехническогоПроекта(НаименованиеКонфигурации, ТехническийПроект, Реквизиты, ТаблицаКонтрольныхТочек, ТаблицаУчастников, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = РегистрыСведений.СогласованиеТехническихПроектов.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.ТехническийПроект = Реквизиты.Наименование;
	Область.Параметры.КонтрольнаяТочка = Реквизиты.КонтрольнаяТочка;
	ТекстовоеОписание.Вывести(Область);
	
	Если Реквизиты.СтатусСогласования = Перечисления.СтатусыСогласованияТехническихПроектов.ГотовоКСогласованию Тогда
		Область = Макет.ПолучитьОбласть("ПодготовкаКСогласованию");
		Область.Параметры.Установил = Реквизиты.Установил;
		ТекстовоеОписание.Вывести(Область);
	ИначеЕсли Реквизиты.СтатусСогласования = Перечисления.СтатусыСогласованияТехническихПроектов.НеСогласовано Тогда
		Область = Макет.ПолучитьОбласть("НеСогласовано");
		Область.Параметры.Установил = Реквизиты.Установил;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("Комментарий");
		Область.Параметры.Комментарий = Реквизиты.Комментарий;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Цели");
	Область.Параметры.ЦелиПроекта = Реквизиты.ЦелиПроекта;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Планирование");
	Область.Параметры.Ответственный = Реквизиты.Ответственный;
	Область.Параметры.ПлановаяДатаНачала = Формат(Реквизиты.ПлановаяДатаНачала, "ДЛФ=D");
	Область.Параметры.ПлановаяДатаОкончания = Формат(Реквизиты.ПлановаяДатаОкончания, "ДЛФ=D");
	Область.Параметры.Очередность = Реквизиты.Очередность;
	ТекстовоеОписание.Вывести(Область);
	
	Если ТаблицаУчастников.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("УчастникиЗаголовок");
		ТекстовоеОписание.Вывести(Область);
		
		Для Каждого СтрокаТаблицы из ТаблицаУчастников Цикл
			Область = Макет.ПолучитьОбласть("УчастникиСтрока");
			Область.Параметры.Участник = СтрокаТаблицы.Участник;
			ТекстовоеОписание.Вывести(Область);
		КонецЦикла;
		
	КонецЕсли;
	
	ВыведенЗаголовокКонтрольныхТочек = Ложь;
	
	Для Каждого СтрокаТаблицы из ТаблицаКонтрольныхТочек Цикл
		
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Пропущена Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыведенЗаголовокКонтрольныхТочек Тогда
			Область = Макет.ПолучитьОбласть("КонтрольныеТочкиЗаголовок");
			ТекстовоеОписание.Вывести(Область);
			ВыведенЗаголовокКонтрольныхТочек = Истина;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("КонтрольныеТочкиСтрока");
		СрокПрохождения = Формат(СтрокаТаблицы.СрокПрохождения, "ДЛФ=D");
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыКонтрольныхТочекТехническихПроектов.Назначена И (НЕ ЗначениеЗаполнено(СтрокаТаблицы.СрокПрохождения)) Тогда
			Область.Параметры.ОписаниеКонтрольнойТочки = Строка(СтрокаТаблицы.КонтрольнаяТочка)+ ": " + "Срок не назначен";
		Иначе
			Область.Параметры.ОписаниеКонтрольнойТочки = Строка(СтрокаТаблицы.КонтрольнаяТочка)+ ": " + СрокПрохождения + "," + СтрокаТаблицы.Статус;
		КонецЕсли;
		
		ТекстовоеОписание.Вывести(Область);
		
	КонецЦикла;
	
	ВывестиСсылки(Макет, ТекстовоеОписание, ТехническийПроект, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

// Возвращает текстовое описание расположения информационной базы
//
Функция РасположениеИнформационнойБазы()
	
	Расположение = СтрокаСоединенияИнформационнойБазы();
	// Сокращаем концевую точку с запятой
	Расположение = Лев(Расположение,СтрДлина(Расположение) - 1);
	Расположение = СтрЗаменить(Расположение, ";", ",");
	Расположение = СтрЗаменить(Расположение, "Srvr=", НСтр(" ru= ""Сервер 1С:Предприятия""; ") + " ");
	Расположение = СтрЗаменить(Расположение, "Ref=",  " " + НСтр(" ru= ""информационная база""; ") + " ");
	Расположение = СтрЗаменить(Расположение, "File=", НСтр(" ru= ""Файловая информационная база""; ") + " ");
	
	Возврат Расположение;
	
КонецФункции
