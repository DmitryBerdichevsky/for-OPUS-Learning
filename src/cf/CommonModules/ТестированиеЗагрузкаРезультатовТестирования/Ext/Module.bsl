
#Область ПрограммныйИнтерфейс

// Загружает результаты прохождения тестов из системы непрерывного тестирования
//
Процедура ЗагрузитьРезультатыТестирования() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ПроектыКОбработке = ПроектыКОбработке();
	
	Для Каждого ПроектКОбработке Из ПроектыКОбработке Цикл
		ДанныеПроекта = Новый Структура;
		ЗагруженныеВетки = Новый Массив;
		ДанныеПроекта.Вставить("АдресСервера",ПроектКОбработке.РезультатыВыполненияТестовАдресСервера);
		ДанныеПроекта.Вставить("Токен",ПроектКОбработке.РезультатыВыполненияТестовТокен);
		ДанныеПроекта.Вставить("ИмяПроектаНаСервере",ПроектКОбработке.РезультатыВыполненияТестовИмяПроектаНаСервере);
		ДанныеПроекта.Вставить("Проект",ПроектКОбработке.Проект);
		ДанныеПроекта.Вставить("Наименование", ПроектКОбработке.Наименование);
		
		Если НЕ ЗначениеЗаполнено(ДанныеПроекта.ИмяПроектаНаСервере) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗагрузитьРезультатыТестовПроекта(ДанныеПроекта, ЗагруженныеВетки);
		
		ДанныеПроекта.Очистить();
		Если ПроектКОбработке.АвтоматическиПроверятьИсправлениеОшибок Тогда
			ПроверитьИсправлениеОшибок(ПроектКОбработке.Проект, ЗагруженныеВетки);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры 

//Возвращает элемент справочника Тесты по настройке сценария или создаёт новый, если его нет.
//
// Параметры:
//  НастройкаСценария - СправочникСсылка.НастройкиЗапускаСценариев - Настройка сценария для теста.
//  Проект            - СправочникСсылка.Проекты - Владелец теста. 
// 
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест.
//
Функция ТестПоНастройкеСценария(НастройкаСценария, Проект, ЗаданиеGitLab = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.НастройкаЗапускаСценария = &Ссылка
		|	И Тесты.Владелец = &Проект
		|	И НЕ Тесты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаСценария);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	СпрОбъект.Наименование = НастройкаСценария.Наименование;
	СпрОбъект.НастройкаЗапускаСценария = НастройкаСценария;
	СпрОбъект.Ответственный = НастройкаСценария.Сценарий.Ответственный;
	СпрОбъект.Владелец = Проект;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу("scen", Проект);
	СпрОбъект.Записать();

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИД <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	 

//Возвращает элемент справочника Тесты по настройке процесса или создаёт новый , если его нет.
//
// Параметры:
//  НастройкаПроцесса - СправочникСсылка.НастройкиЗапускаПроцессов - Настройка процесса для теста.
//  Проект            - СправочникСсылка.Проекты - Владелец теста.
//
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест
//
Функция ТестПоНастройкеПроцесса(НастройкаПроцесса, Проект, ЗаданиеGitLab = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.НастройкаЗапускаПроцесса = &Ссылка
		|	И Тесты.Владелец = &Проект
		|	И НЕ Тесты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаПроцесса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	СпрОбъект.Наименование = НастройкаПроцесса.Наименование;
	СпрОбъект.НастройкаЗапускаПроцесса = НастройкаПроцесса;
	СпрОбъект.Ответственный = НастройкаПроцесса.Владелец.Ответственный;
	СпрОбъект.Владелец = Проект;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу("proc", Проект);
	СпрОбъект.Записать();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	 

//Возвращает элемент справочника Тесты по имени задания из карты системы сборки или создаёт новый, если его нет.
//
// Параметры:
//  ИмяВСистемеСборки - Строка - Уникальное имя теста из системы сборки.
//  Проект            - СправочникСсылка.Проекты - Владелец теста.
//  Наименование      - Строка - Текстовое наименование теста.
// 
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест.
//
Функция ТестСППРПоСтроке(Знач ИмяВСистемеСборки, Проект, Знач Наименование="", ЗаданиеGitLab = Неопределено, ДанныеТеста = Неопределено) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка", Неопределено);
	Структура.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных", Ложь);
	Если НЕ ЗначениеЗаполнено(ИмяВСистемеСборки) Тогда
		ИмяВСистемеСборки = "";
	КонецЕсли;
	Префикс = ПрефиксГруппыПоИмениВСистемеСборки(ИмяВСистемеСборки);
	
	ИмяВСистемеСборки = УбратьИзИмениВСистемеСборкиЧисловыеИндексы(ИмяВСистемеСборки);
	Наименование = УбратьИзИмениВСистемеСборкиЧисловыеИндексы(Наименование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка,
		|	Тесты.РезультатыТестаДетализируютсяПоОбъектамМетаданных КАК РезультатыТестаДетализируютсяПоОбъектамМетаданных
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.Владелец = &Проект
		|	И Тесты.ИмяВСистемеСборки = &ИмяВСистемеСборки
		|	И НЕ Тесты.ПометкаУдаления
		|	И Тесты.НастройкаЗапускаСценария = ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаСценариев.ПустаяСсылка)
		|	И Тесты.НастройкаЗапускаПроцесса = ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаПроцессов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ИмяВСистемеСборки", ИмяВСистемеСборки);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Структура.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных",
			ВыборкаДетальныеЗаписи.РезультатыТестаДетализируютсяПоОбъектамМетаданных);
		Возврат Структура;
	КонецЦикла;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	Если Найти(Префикс, "meta") > 0 Тогда
		СпрОбъект.РезультатыТестаДетализируютсяПоОбъектамМетаданных = Истина;
		СпрОбъект.Универсальный = Истина;
	ИначеЕсли Найти(Префикс, "smoke") > 0 Тогда
		СпрОбъект.Универсальный = Истина;
	КонецЕсли;
	СпрОбъект.Наименование = ?(ЗначениеЗаполнено(Наименование), 
								Наименование, ИмяВСистемеСборки);
	СпрОбъект.Владелец = Проект;
	СпрОбъект.ИмяВСистемеСборки = ИмяВСистемеСборки;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу(Префикс, Проект);
	СпрОбъект.Записать();  
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	Структура.Вставить("Ссылка", СпрОбъект.Ссылка);
	Структура.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных",
		СпрОбъект.РезультатыТестаДетализируютсяПоОбъектамМетаданных);
	
	Возврат Структура;
	
КонецФункции

//Возвращает элемент справочника Тесты по uid настройки сценария или создаёт новый, если его нет.
//
// Параметры:
//  UIDНастройкиСценария - Строка - UID настройки сценария для теста.
//  ИмяНастройкиСценария - Строка - Имя настройки сценария для теста.
//  Проект               - СправочникСсылка.Проекты - Владелец теста.
//  UIDОтветственного    - Строка - UID ответственный за тест.
// 
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест.
//
Функция ТестПоUIDНастройкиСценария(ДанныеТеста, ИмяНастройкиСценария, Проект) Экспорт
	UidНастройкиСценария = ДанныеТеста.UidНастройкиСценария;
	UIDОтветственного = Неопределено;
	Если ДанныеТеста.Свойство("UIDОтветственный") Тогда
		UIDОтветственного = ДанныеТеста.UIDОтветственный;
	КонецЕсли;
	
	UIDРазделПроекта = Неопределено;
	Если ДанныеТеста.Свойство("uidразделпроекта") Тогда
		UIDРазделПроекта = ДанныеТеста.uidразделпроекта;
	КонецЕсли;
	
	ЗаданиеGitLab = Неопределено;
	Если ДанныеТеста.Свойство("ЗаданиеGitLab") Тогда
		ЗаданиеGitLab = ДанныеТеста.ЗаданиеGitLab;
	КонецЕсли;	 
	
	КешОтветственный = Неопределено;
	Если ДанныеТеста.Свойство("КешОтветственный") Тогда
		КешОтветственный = ДанныеТеста.КешОтветственный;
	КонецЕсли;
	
	КешРазделПроекта = Неопределено;
	Если ДанныеТеста.Свойство("КешРазделПроекта") Тогда
		КешРазделПроекта = ДанныеТеста.КешРазделПроекта;
	КонецЕсли;	
	
	ЭтоОсновнаяВеткаПроекта = Ложь;
	Если ДанныеТеста.Свойство("ЭтоОсновнаяВеткаПроекта") Тогда
		ЭтоОсновнаяВеткаПроекта = ДанныеТеста.ЭтоОсновнаяВеткаПроекта;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Тесты.Ссылка КАК Ссылка,
		|	Тесты.Ответственный КАК Ответственный,
		|	Тесты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.UIDНастройкиСценария = &UIDНастройкиСценария
		|	И Тесты.Владелец = &Проект
		|	И НЕ Тесты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("UIDНастройкиСценария", UIDНастройкиСценария);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ЭтоОсновнаяВеткаПроекта Тогда
			Ответственный = ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, КешОтветственный);
			Если ЗначениеЗаполнено(Ответственный) И Ответственный <> ВыборкаДетальныеЗаписи.Ответственный Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.Ответственный = Ответственный;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлен ответственный в тесте. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяНастройкиСценария) И ИмяНастройкиСценария <> ВыборкаДетальныеЗаписи.Наименование Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.Наименование = ИмяНастройкиСценария;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлено наименование теста. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
				
			КонецЕсли;
									
		КонецЕсли;	 
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	СпрОбъект.Наименование = ИмяНастройкиСценария;
	СпрОбъект.UIDНастройкиСценария = UIDНастройкиСценария;
	СпрОбъект.Владелец = Проект;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу("scen", Проект);
	СпрОбъект.Ответственный = ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, КешОтветственный);
	СпрОбъект.Записать(); 
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроектыКОбработке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.РезультатыВыполненияТестовАдресСервера КАК РезультатыВыполненияТестовАдресСервера,
		|	Проекты.РезультатыВыполненияТестовТокен КАК РезультатыВыполненияТестовТокен,
		|	Проекты.РезультатыВыполненияТестовИмяПроектаНаСервере КАК РезультатыВыполненияТестовИмяПроектаНаСервере,
		|	Проекты.АвтоматическиПроверятьИсправлениеОшибок КАК АвтоматическиПроверятьИсправлениеОшибок
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ЗагружатьРезультатыВыполненияТестов";
	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции	 

Процедура ОбработатьДанныеЗапускаТестированияGitLab(Pipe, ДанныеПроекта, Соединение, ЗагруженныеВетки=Неопределено)
	
	Если ЗагруженныеВетки = Неопределено Тогда
		ЗагруженныеВетки = Новый Массив;
	КонецЕсли;
	
	ВеткаСППР = Неопределено;
	
	ИмяПроекта = ДанныеПроекта.Наименование;

	НомерЗапускТестированияGitLab = Pipe.id;
	ЗапускЗавершен = СтатусGitlabЗавершен(Pipe.status);
	
	Если ЗапускЗавершен 
		И ЗапускТестированияЗагружен(НомерЗапускТестированияGitLab, Pipe.updated_at) Тогда
		Возврат;
	КонецЕсли; 
	
	Информация = ИнформацияОЗапускеТестированияGitLab(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере, НомерЗапускТестированияGitLab);
	ДатаСборки = Информация.created_at;
	ДатаЗавершения = ?(ЗапускЗавершен, Pipe.updated_at, Неопределено);
	
	ВеткаСтрокой = "";
	ВеткаСППР = ВеткаСППР(Информация.ref, ДанныеПроекта.Проект, ВеткаСтрокой);
	ЭтоОсновнаяВеткаПроекта = ЭтоОсновнаяВеткаПроекта(ВеткаСППР);
	Если НЕ ЗначениеЗаполнено(ВеткаСППР) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.Создание ветки'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Не найдена Ветка по строке %1. Запуск сборки: %2'"), 
							Информация.ref,
							НомерЗапускТестированияGitLab));

		Возврат;
	КонецЕсли;

	Тег = "";
	Если Информация.tag Тогда
		Тег = Информация.ref;
	КонецЕсли;
	
	ВсеЗаданияGitLab = ИнформацияОЗаданияхGitLab(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере, НомерЗапускТестированияGitLab);
	КоличествоЗаданийДляАнализа = 0;
	Для Каждого ЗаданиеGitLab Из ВсеЗаданияGitLab Цикл
		Если НЕ Лев(ЗаданиеGitLab.name, 4) = "util" Тогда
			КоличествоЗаданийДляАнализа = КоличествоЗаданийДляАнализа + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если КоличествоЗаданийДляАнализа = 0 Тогда
		// В запуске тестирования нет ни одного задания для загрузки.
		Возврат;
	КонецЕсли;

	ЗаданияGitLabСоСценарнымиТестами = Новый Массив;
	ПрочиеЗаданияGitLab = Новый Массив;
	ИмяАвтора = "";
	Если Информация.Свойство("user") И Информация.user.Свойство("name") Тогда
		ИмяАвтора = Информация.user.name;
	КонецЕсли;
	
	ЗапускТестирования = НовыйЗапускТестирования(НомерЗапускТестированияGitLab, ДатаСборки, ВеткаСППР, Информация.ref,
										  ДанныеПроекта.Проект, ИмяАвтора);
	ЗаданияGitLab = ОтфильтроватьЗаданияGitLab(ЗапускТестирования, ВсеЗаданияGitLab);
	
	Для Каждого ЗаданиеGitLab Из ЗаданияGitLab Цикл
		
		Если (СтрНайти(НРег(ЗаданиеGitLab.name),"bdd_test") > 0) ИЛИ (СтрНайти(НРег(ЗаданиеGitLab.name),"bdd test") > 0) Тогда
			ЗаданияGitLabСоСценарнымиТестами.Добавить(ЗаданиеGitLab);
			Продолжить;
		КонецЕсли;
		
		Если Лев(ЗаданиеGitLab.name, 4) = "util" Тогда
			Продолжить;
		КонецЕсли; 
		ПрочиеЗаданияGitLab.Добавить(ЗаданиеGitLab);
		
	КонецЦикла;
	
	Если ПрочиеЗаданияGitLab.Количество() = 0 И ЗаданияGitLabСоСценарнымиТестами.Количество() = 0 Тогда
		// Не найдено ни одного задания GitLab для загрузки.
		
		ЗапускТестированияОбъект = ЗапускТестирования.ПолучитьОбъект();
		ЗапускТестированияОбъект.ДатаЗавершения = ДатаЗавершения;
		ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
		Возврат;
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеXML = Новый ЧтениеXML;
	Построитель = Новый ПостроительDOM;
	
	ТаблицаТестовПроцессовДляЗапуска = ТаблицаТестовДляЗапуска();
	ТаблицаТестовСценариевДляЗапуска = ТаблицаТестовДляЗапуска();
	
	Для Каждого ЗаданиеGitLab Из ПрочиеЗаданияGitLab Цикл
		
		Если НЕ СтатусGitlabЗавершен(ЗаданиеGitLab.status) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВСистемаСборки = ЗаданиеGitLab.name; 
		ДанныеТеста = ДанныеТестаПоУмолчанию(ЗаданиеGitLab, ДатаСборки);
		
		ДвДанныеАртефактов = Неопределено;
		Попытка
			ДвДанныеАртефактов = АртефактыЗаданияGitLab(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере, НомерЗапускТестированияGitLab, ЗаданиеGitLab);
		Исключение
			ДвДанныеАртефактов = Неопределено;
		КонецПопытки;
		
		Если ДвДанныеАртефактов = Неопределено Тогда 
			ДанныеТестаСППР = ТестСППРПоСтроке(ИмяВСистемаСборки, ДанныеПроекта.Проект,,ЗаданиеGitLab);
			ДанныеТеста.Вставить("Тест", ДанныеТестаСППР.Ссылка);
			// Если не удалось получить артефакты из-за ошибки выполнения запроса (а не потому что они уже удалены) запись всё равно создается.
			ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
			Продолжить;
		КонецЕсли;

		ИмяКаталога = РаспаковатьАртефактыВоВременныйКаталог(ЧтениеZipФайла,ДвДанныеАртефактов);
		КаталогПоиска = ИмяКаталога + ПолучитьРазделительПути() + "junit";
		Файлы = НайтиФайлы(КаталогПоиска,"*.xml",Истина);
		Если Файлы.Количество() = 0 Тогда
			ДанныеТестаСППР = ТестСППРПоСтроке(ИмяВСистемаСборки, ДанныеПроекта.Проект,,ЗаданиеGitLab);
			ДанныеТеста.Вставить("Тест", ДанныеТестаСППР.Ссылка);
			ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
			Продолжить;
		КонецЕсли;

		Для Каждого Файл Из Файлы Цикл
			ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
			Документ = Построитель.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			testsuites = Документ.ПервыйДочерний;
			Для Каждого testsuite Из testsuites.ДочерниеУзлы Цикл
				ВидТеста = Неопределено;
				Для Каждого Атрибут Из testsuite.Атрибуты Цикл
					Если НРег(Атрибут.Имя) = "name" Тогда
						ВидТеста = Атрибут.Значение;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				Если ВидТеста = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				ЗаписатьВСтруктуруЗначенияИзXML(ДанныеТеста, testsuite);
				
				ДанныеТестаСППР = ТестСППРПоСтроке(ИмяВСистемаСборки, ДанныеПроекта.Проект,
												   ВидТеста + " " + ИмяВСистемаСборки,ЗаданиеGitLab,ДанныеТеста);
				ДанныеТеста.Вставить("Тест", ДанныеТестаСППР.Ссылка);
				
				// Для всех тестов - с группировкой по элементам и без - создается сначала общая запись в регистре.
				ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
				
				ТаблицаМетаданных = ИнтеграцияСВНешнимиСистемами.ПолучитьТаблицуМетаданных();
				
				Если ДанныеТестаСППР.РезультатыТестаДетализируютсяПоОбъектамМетаданных Тогда
					Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
						Если ДочерниеУзлы_testsuite.ИмяУзла = "testcase" Тогда
							ЭлементТеста = Неопределено;
							НоваяСтрока = ТаблицаМетаданных.Добавить();
							Для Каждого Атрибут Из ДочерниеУзлы_testsuite.Атрибуты Цикл
								Если Атрибут.ИмяУзла = "name" Тогда
									НоваяСтрока.ИмяМетаданного = Атрибут.Значение;
								КонецЕсли; 
							КонецЦикла;
							
							НоваяСтрока.Уточнение = "";
							Для Каждого ДочерниеУзлы_testcase Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
								Если ДочерниеУзлы_testcase.ИмяУзла = "error" 
									ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "failure"
									ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "skipped"
									ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "success" Тогда
									НоваяСтрока.Уточнение = ДочерниеУзлы_testcase.ИмяУзла;
									Прервать;
								КонецЕсли; 
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					ОбъектыМетаданных = ИнтеграцияСВнешнимиСистемами.НайтиОбъектыМетаданных(ТаблицаМетаданных, ИмяПроекта);
					Для Каждого Строка Из ОбъектыМетаданных Цикл
						Если ЗначениеЗаполнено(Строка.ПодчиненныйОбъект) Тогда
							ЭлементТеста = Строка.ПодчиненныйОбъект;
						ИначеЕсли ЗначениеЗаполнено(Строка.ПроблемныйОбъект) Тогда
							ЭлементТеста = Строка.ПроблемныйОбъект;
						Иначе
							Продолжить;
						КонецЕсли;

						ДанныеТеста.Вставить("ЭлементТеста", ЭлементТеста);
						ДанныеТеста.Вставить("Статус", СтатусЭлементаПоСтроке(Строка.Уточнение));
						ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	 
			
		КонецЦикла;	
		
		Попытка
			УдалитьФайлы(ИмяКаталога);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Загрузка результатов тестирования. Ошибка удаления временных файлов'"),
				УровеньЖурналаРегистрации.Ошибка,,
				Неопределено,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	КоличествоТестов = 0;
	АртефактыУдалены = Ложь;
	Для Каждого ЗаданиеGitLab Из ЗаданияGitLabСоСценарнымиТестами Цикл
		
		Если НЕ СтатусGitlabЗавершен(ЗаданиеGitLab.status) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(ЗаданиеGitLab.artifacts_expire_at) И ЗаданиеGitLab.artifacts_expire_at < ТекущаяДата() Тогда
			АртефактыУдалены = Истина;
		КонецЕсли;	 
		
		Попытка
			ДвДанныеАртефактов = АртефактыЗаданияGitLab(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере, НомерЗапускТестированияGitLab, ЗаданиеGitLab);
		Исключение
			//артефактов может уже не быть
			Продолжить;
		КонецПопытки;
		
		Поток = ДвДанныеАртефактов.ОткрытьПотокДляЧтения();
		
		ЧтениеZipФайла.Открыть(Поток);
		
		ИмяКаталога = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ИмяКаталога);
		ЧтениеZipФайла.ИзвлечьВсе(ИмяКаталога,РежимВосстановленияПутейФайловZIP.Восстанавливать);
		ЧтениеZipФайла.Закрыть();
		Поток.Закрыть();
		
		ФайлыСценарныеТестыДляЗапуска = НайтиФайлы(ИмяКаталога,"compile_tests.txt",Истина);
		Для Каждого ФайлСценарныеТестыДляЗапуска Из ФайлыСценарныеТестыДляЗапуска Цикл
			ЧтениеJSON.ОткрытьФайл(ФайлСценарныеТестыДляЗапуска.ПолноеИмя);
			Данные = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Для Каждого Тест Из Данные.process_tests Цикл
				СтрокаТаблицы = ТаблицаТестовПроцессовДляЗапуска.Найти(Тест,"Тест");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаТестовПроцессовДляЗапуска.Добавить();
					СтрокаТаблицы.Тест = Тест;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого Тест Из Данные.scenario_tests Цикл
				СтрокаТаблицы = ТаблицаТестовСценариевДляЗапуска.Найти(Тест,"Тест");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаТестовСценариевДляЗапуска.Добавить();
					СтрокаТаблицы.Тест = Тест;
				КонецЕсли;	 
			КонецЦикла;	
			
		КонецЦикла; 
		
		ФайлыjUnit = НайтиФайлы(ИмяКаталога,"*.xml",Истина);
		
		Для Каждого ФайлjUnit Из ФайлыjUnit Цикл
			УчитыватьТолькоТестыВыполненныеСОшибкой = Ложь;
			Если НРег(ФайлjUnit.Имя) = "junit_compile.xml" Тогда
				// Значит выполняется загрузка junit с результатами компиляции. 
				// Если тест скомпилировался успешно - он запустится и у него будет отдельный junit, который мы загрузим далее
				// и тогда делать запись в регистр не нужно.
				// Если произошла ошибка при компиляции - её нужно загрузить, т.к. больше никакой информации в отдельном Junit о ней нет.
				УчитыватьТолькоТестыВыполненныеСОшибкой = Истина;
			ИначеЕсли НРег(ФайлjUnit.Имя) <> "junit.xml" Тогда
				Продолжить;
			КонецЕсли;
			
			ЧтениеXML.ОткрытьФайл(ФайлjUnit.ПолноеИмя);
			Документ = Построитель.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			testsuites = Документ.ПервыйДочерний;
			Для Каждого testsuite Из testsuites.ДочерниеУзлы Цикл
				
				ДанныеТеста = ДанныеТестаПоУмолчанию(ЗаданиеGitLab, ДатаСборки);
				ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.ВыполненУспешно);
				ДанныеТеста.Вставить("КешОтветственный", ДанныеПроекта.КешОтветственный);
				ДанныеТеста.Вставить("КешРазделПроекта", ДанныеПроекта.КешРазделПроекта);
				ДанныеТеста.Вставить("ЭтоОсновнаяВеткаПроекта", ЭтоОсновнаяВеткаПроекта);

				Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
					Если ДочерниеУзлы_testsuite.ИмяУзла = "properties" Тогда
						Для Каждого property Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
							name = "";
							value = "";
							Для Каждого Атрибут Из property.Атрибуты Цикл
								Если Атрибут.ИмяУзла = "name" Тогда
									name = Атрибут.ЗначениеУзла;
								ИначеЕсли Атрибут.ИмяУзла = "value" Тогда
									value = Атрибут.ЗначениеУзла;
								КонецЕсли;	 
							КонецЦикла;	 
							Если name <> "" Тогда
								ДанныеТеста.Вставить(ПолучитьИмяСвойстваДляСценарныхТестов(name),value);
							КонецЕсли;	 
						КонецЦикла;	 
					ИначеЕсли ДочерниеУзлы_testsuite.ИмяУзла = "testcase" Тогда
						Для Каждого ДочерниеУзлы_testcase Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
							Если ДочерниеУзлы_testcase.ИмяУзла = "error" 
								ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "failure" Тогда
								ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой);
							ИначеЕсли ДочерниеУзлы_testcase.ИмяУзла = "skipped" Тогда
								ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
							ИначеЕсли ДочерниеУзлы_testcase.ИмяУзла = "name" Тогда
								ДанныеТеста.Вставить("TestCase",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;
				КонецЦикла;
				Если УчитыватьТолькоТестыВыполненныеСОшибкой И ДанныеТеста.Статус <> Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой Тогда
					Продолжить;
				КонецЕсли;
			
				КоличествоТестов = КоличествоТестов + 1;
				ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
				Если ДанныеТеста.КодНастройкиПроцесса <> Неопределено И ДанныеТеста.КодНастройкиПроцесса <> "" Тогда
					УстановитьОтметкуТестЗапускался(ТаблицаТестовПроцессовДляЗапуска,ДанныеТеста.КодНастройкиПроцесса);
				ИначеЕсли ДанныеТеста.КодНастройкиСценария <> Неопределено И ДанныеТеста.КодНастройкиСценария <> "" Тогда
					УстановитьОтметкуТестЗапускался(ТаблицаТестовСценариевДляЗапуска,ДанныеТеста.КодНастройкиСценария);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	 
		
		Попытка
			УдалитьФайлы(ИмяКаталога);
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗапускТестированияОбъект = ЗапускТестирования.ПолучитьОбъект();
	ЗапускТестированияОбъект.ДатаЗавершения = ДатаЗавершения;
	ЗапускТестированияОбъект.КоличествоТестов = КоличествоТестов;
	ЗапускТестированияОбъект.Ветка = ВеткаСППР;
	ЗапускТестированияОбъект.Тег = Тег;
	ЗапускТестированияОбъект.Проект = ДанныеПроекта.Проект;
	ЗапускТестированияОбъект.ВеткаСтрокой = ВеткаСтрокой;
	ЗапускТестированияОбъект.СборкаВерсии = СборкаВерсииПоТегу(ВеткаСППР,Информация);
	ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
	
	Если ЗагруженныеВетки.Найти(ВеткаСППР) = Неопределено Тогда
		ЗагруженныеВетки.Добавить(ВеткаСППР);
	КонецЕсли;
	
	Если ЗапускЗавершен И ДатаЗавершения <> Неопределено И НЕ АртефактыУдалены Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаТестовПроцессовДляЗапуска Цикл
			Если НЕ СтрокаТаблицы.Запускался Тогда
				ДанныеТеста = ДанныеТестаПоУмолчанию(, ДатаСборки);
				ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
				ДанныеТеста.Вставить("коднастройкипроцесса",СтрокаТаблицы.Тест);
				
				ЗаписатьРезультатТеста(ВеткаСППР,
				ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
			КонецЕсли;	 
		КонецЦикла;	 
		Для Каждого СтрокаТаблицы Из ТаблицаТестовСценариевДляЗапуска Цикл
			Если НЕ СтрокаТаблицы.Запускался Тогда
				ДанныеТеста = ДанныеТестаПоУмолчанию(, ДатаСборки);
				ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
				ДанныеТеста.Вставить("коднастройкисценария",СтрокаТаблицы.Тест);
				
				ЗаписатьРезультатТеста(ВеткаСППР,
				ДанныеТеста, ЗапускТестирования, ДанныеПроекта.Проект, ЗаданиеGitLab);
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ЗаписатьЗапускТестирования(Запуск)
	// При загрузке запусков, они уже запущены, поэтому при проведении их не надо запускать. 
	// Поэтому они создаются уже проведенными.
	Запуск.Проведен = Истина;
	Запуск.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ПроверитьИсправлениеОшибок(Проект, ЗагруженныеВетки)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ошибки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ОшибкиДляПроверки
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.Владелец = &Проект
		|	И НЕ Ошибки.Проверена
		|	И НЕ Ошибки.Отозвана
		|	И Ошибки.МетодВыявленияОшибки = ЗНАЧЕНИЕ(Перечисление.МетодыВыявленияОшибок.Автотесты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОшибкиДляПроверки.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОшибкиДляПроверки.Ссылка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
		|			ТОГДА ИсправлениеВВетках.Ветка
		|		ИНАЧЕ ОшибкиДляПроверки.Ссылка.ВеткаОбнаружения
		|	КОНЕЦ КАК ВеткаОбнаружения,
		|	ВЫБОР
		|		КОГДА ОшибкиДляПроверки.Ссылка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
		|				И НЕ ИсправлениеВВетках.ВеткаИсправления ЕСТЬ NULL
		|				И НЕ ИсправлениеВВетках.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
		|			ТОГДА ИсправлениеВВетках.ВеткаИсправления
		|		КОГДА НЕ ОшибкиДляПроверки.Ссылка.ВеткаИсправления ЕСТЬ NULL
		|				И НЕ ОшибкиДляПроверки.Ссылка.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
		|			ТОГДА ОшибкиДляПроверки.Ссылка.ВеткаИсправления
		|		ИНАЧЕ ОшибкиДляПроверки.Ссылка.ВеткаОбнаружения
		|	КОНЕЦ КАК ВеткаИсправления
		|ПОМЕСТИТЬ ВеткиОбнаруженияИИсправления
		|ИЗ
		|	ОшибкиДляПроверки КАК ОшибкиДляПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ИсправлениеВВетках
		|		ПО ОшибкиДляПроверки.Ссылка = ИсправлениеВВетках.Ссылка
		|			И (ИсправлениеВВетках.СостояниеИсправления <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ИсправлениеНеПланируется))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВеткиОбнаруженияИИсправления.Ссылка КАК Ссылка,
		|	ВеткиОбнаруженияИИсправления.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	ВеткиОбнаруженияИИсправления.ВеткаИсправления КАК ВеткаИсправления
		|ПОМЕСТИТЬ ОшибкиСОбновленнымиДанными
		|ИЗ
		|	ВеткиОбнаруженияИИсправления КАК ВеткиОбнаруженияИИсправления
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВеткиОбнаруженияИИсправления КАК ВеткиОбнаружения
		|			ГДЕ
		|				ВеткиОбнаружения.Ссылка = ВеткиОбнаруженияИИсправления.Ссылка
		|				И ВеткиОбнаружения.ВеткаИсправления В (&ЗагруженныеВетки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОшибкиСОбновленнымиДанными.Ссылка КАК Ссылка,
		|	ОшибкиСОбновленнымиДанными.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	ОшибкиСОбновленнымиДанными.ВеткаИсправления КАК ВеткаИсправления
		|ПОМЕСТИТЬ ОшибкиСПовторяющимисяЗагруженные
		|ИЗ
		|	ОшибкиСОбновленнымиДанными КАК ОшибкиСОбновленнымиДанными
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.РезультатыРегистрацииОшибок.СрезПервых(, НЕ Дубликат
		|					И ЗапускТестирования <> ЗНАЧЕНИЕ(Документ.ЗапускТестирования.ПустаяСсылка)) КАК РезультатыРегистрацииОшибокСрезПервых
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияТестов КАК РезультатыВыполненияТестов
		|					ПО
		|						РезультатыРегистрацииОшибокСрезПервых.Ветка = РезультатыВыполненияТестов.Ветка
		|							И РезультатыРегистрацииОшибокСрезПервых.Тест = РезультатыВыполненияТестов.Тест
		|							И РезультатыРегистрацииОшибокСрезПервых.ЭлементТеста = РезультатыВыполненияТестов.ЭлементТеста
		|							И РезультатыРегистрацииОшибокСрезПервых.ЗапускТестирования = РезультатыВыполненияТестов.ЗапускТестирования
		|			ГДЕ
		|				РезультатыРегистрацииОшибокСрезПервых.Ошибка = ОшибкиСОбновленнымиДанными.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыРегистрацииОшибокСрезПервых.Тест КАК Тест,
		|	РезультатыРегистрацииОшибокСрезПервых.ЭлементТеста КАК ЭлементТеста,
		|	РезультатыРегистрацииОшибокСрезПервых.Ошибка КАК Ошибка,
		|	ОшибкиСОбновленнымиДанными.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	ОшибкиСОбновленнымиДанными.ВеткаИсправления КАК ВеткаИсправления,
		|	РезультатыРегистрацииОшибокСрезПервых.ЗапускТестирования КАК ЗапускТестирования
		|ПОМЕСТИТЬ ТестыЗаблокированныеИсходнойОшибкой
		|ИЗ
		|	РегистрСведений.РезультатыРегистрацииОшибок.СрезПервых КАК РезультатыРегистрацииОшибокСрезПервых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОшибкиСПовторяющимисяЗагруженные КАК ОшибкиСОбновленнымиДанными
		|		ПО РезультатыРегистрацииОшибокСрезПервых.Ошибка = ОшибкиСОбновленнымиДанными.Ссылка
		|			И РезультатыРегистрацииОшибокСрезПервых.Ветка = ОшибкиСОбновленнымиДанными.ВеткаОбнаружения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыВыполненияТестовСрезПоследних.Период КАК Период,
		|	РезультатыВыполненияТестовСрезПоследних.Тест КАК Тест,
		|	РезультатыВыполненияТестовСрезПоследних.Ветка КАК Ветка,
		|	РезультатыВыполненияТестовСрезПоследних.Статус КАК Статус,
		|	РезультатыВыполненияТестовСрезПоследних.НомерЗаданияТестирования КАК НомерЗаданияТестирования,
		|	РезультатыВыполненияТестовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненУспешно) КАК ТестВыполненУспешно,
		|	ТестыЗаблокированныеИсходнойОшибкой.Ошибка КАК Ошибка,
		|	ТестыЗаблокированныеИсходнойОшибкой.ЗапускТестирования КАК ПервыйЗапускТестирования,
		|	РезультатыВыполненияТестовСрезПоследних.ЗапускТестирования КАК ЗапускТестирования,
		|	РезультатыВыполненияТестовСрезПоследних.ЗапускТестирования.Дата КАК ДатаЗапускаТестирования,
		|	ТестыЗаблокированныеИсходнойОшибкой.Ошибка.ДатаИсправления КАК ДатаИсправления
		|ПОМЕСТИТЬ ТекущееСостояниеТестовЗаблокированныхОшибкой
		|ИЗ
		|	ТестыЗаблокированныеИсходнойОшибкой КАК ТестыЗаблокированныеИсходнойОшибкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияТестов.СрезПоследних(, Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.НеЗапускался)) КАК РезультатыВыполненияТестовСрезПоследних
		|		ПО (РезультатыВыполненияТестовСрезПоследних.Тест = ТестыЗаблокированныеИсходнойОшибкой.Тест)
		|			И (РезультатыВыполненияТестовСрезПоследних.Ветка = ТестыЗаблокированныеИсходнойОшибкой.ВеткаИсправления)
		|			И (РезультатыВыполненияТестовСрезПоследних.ЭлементТеста = ТестыЗаблокированныеИсходнойОшибкой.ЭлементТеста)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка КАК Ошибка,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА ТекущееСостояниеТестовЗаблокированныхОшибкой.ТестВыполненУспешно
		|				ТОГДА ТекущееСостояниеТестовЗаблокированныхОшибкой.Статус
		|		КОНЕЦ) КАК КоличествоУспешных,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА НЕ ТекущееСостояниеТестовЗаблокированныхОшибкой.ТестВыполненУспешно
		|				ТОГДА ТекущееСостояниеТестовЗаблокированныхОшибкой.Статус
		|		КОНЕЦ) КАК КоличествоСОшибкой
		|ПОМЕСТИТЬ СостояниеПоОшибкам
		|ИЗ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой КАК ТекущееСостояниеТестовЗаблокированныхОшибкой
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеПоОшибкам.Ошибка КАК Ошибка
		|ИЗ
		|	СостояниеПоОшибкам КАК СостояниеПоОшибкам
		|ГДЕ
		|	СостояниеПоОшибкам.КоличествоСОшибкой = 0
		|	И СостояниеПоОшибкам.КоличествоУспешных > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка КАК Ошибка,
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.НомерЗаданияТестирования КАК НомерЗаданияТестирования
		|ИЗ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой КАК ТекущееСостояниеТестовЗаблокированныхОшибкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостояниеПоОшибкам КАК СостояниеПоОшибкам
		|		ПО (СостояниеПоОшибкам.Ошибка = ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка)
		|			И (СостояниеПоОшибкам.КоличествоСОшибкой = 0)
		|			И (СостояниеПоОшибкам.КоличествоУспешных > 0)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ЗагруженныеВетки", ЗагруженныеВетки);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[МассивРезультатов.Количество()-2].Выбрать();
	ИдентификаторыЗапусков = МассивРезультатов[МассивРезультатов.Количество()-1].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			АвторСообщения = Пользователи.ТекущийПользователь();
			Комментарий = НСтр("ru = 'Все заблокированные тесты выполняются успешно'");
			Строки = Выборка.Ошибка.Протокол.НайтиСтроки(Новый Структура("Автор", АвторСообщения));
			УжеВыполняласьПроверка = Ложь;
			Для Каждого Строка Из Строки Цикл
				Если СтрНайти(НРег(Строка.Комментарий), НРег(Комментарий)) > 0 Тогда
					// Уже выполнялась проверка
					УжеВыполняласьПроверка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УжеВыполняласьПроверка Тогда
				Продолжить;
			КонецЕсли;

			ОшибкаОбъект = Выборка.Ошибка.ПолучитьОбъект();
			Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
				ОшибкаОбъект.Статус     = Перечисления.СтатусыОшибок.Отозвана;
				ОшибкаОбъект.НеПризнана = Истина;
				ОшибкаОбъект.Отозвана = Истина;
				ОшибкаОбъект.Признана   = Ложь;
				Комментарий = НСтр("ru = 'Все заблокированные тесты выполняются успешно.'");
				Если НЕ ЗначениеЗаполнено(ОшибкаОбъект.ПричиныНепризнания) Тогда
					ОшибкаОбъект.ПричиныНепризнания = Комментарий;
				КонецЕсли;
			Иначе
				Комментарий = НСтр("ru = 'Обратите внимание: все заблокированные тесты выполняются успешно.'");
			КонецЕсли;
			СтрокиСИдентификаторами = ИдентификаторыЗапусков.НайтиСтроки(Новый Структура("Ошибка", Выборка.Ошибка));
			Если СтрокиСИдентификаторами.Количество() > 0 Тогда
				 Комментарий = Комментарий + Символы.ПС + НСтр("ru = 'Ссылки на успешные задания:'");
				 Для Каждого Строка Из СтрокиСИдентификаторами Цикл
				 	Комментарий = Комментарий + Символы.ПС + Символы.Таб 
								+ Документы.ЗапускТестирования.АдресЗаданияТестирования(Проект, Строка.НомерЗаданияТестирования);
				 КонецЦикла;
			КонецЕсли;
			
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(АвторСообщения, Комментарий);
			ОшибкаОбъект.Записать();
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка исправления ошибок'"), 
			                         УровеньЖурналаРегистрации.Ошибка,,
			                         Выборка.Ошибка, 
			                         ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЦикла;

	
КонецПроцедуры

Функция СтатусGitlabЗавершен(Статус)
	Если Статус = "manual" ИЛИ
		Статус = "created" ИЛИ 
		Статус = "pending" ИЛИ 
		Статус = "running" Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПолучитьИмяСвойстваДляСценарныхТестов(ИмяСвойства)
	Если ИмяСвойства = "scenario_setting" Тогда
		Возврат "КодНастройкиСценария";
	ИначеЕсли ИмяСвойства = "process_setting" Тогда
		Возврат "КодНастройкиПроцесса";
	КонецЕсли;
	Возврат ИмяСвойства;
КонецФункции

Функция СтатусТестаПоСтроке(СтрокаСтатуса)
	Если СтрокаСтатуса = "error" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой; 
	ИначеЕсли СтрокаСтатуса = "failed" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой; 
	ИначеЕсли СтрокаСтатуса = "skipped" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался; 
	ИначеЕсли СтрокаСтатуса = "created" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался; 
	ИначеЕсли СтрокаСтатуса = "success" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненУспешно; 
	КонецЕсли;	 
	
	Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался;
КонецФункции	 

Функция СтатусЭлементаПоСтроке(СтрокаСтатуса)
	Если СтрокаСтатуса = "" 
		ИЛИ СтрокаСтатуса = "success" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненУспешно;
	ИначеЕсли СтрокаСтатуса = "error" 
		ИЛИ СтрокаСтатуса = "failed" 
		ИЛИ СтрокаСтатуса = "failure" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой; 
	ИначеЕсли СтрокаСтатуса = "skipped" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался;
	КонецЕсли;
	Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался;
КонецФункции

Функция ПрефиксГруппыПоИмениВСистемеСборки(ИмяВСистемеСборки)
	Префикс = Неопределено;
	Поз1 = Найти(ИмяВСистемеСборки, " ");
	Поз2 = Найти(ИмяВСистемеСборки, "_");
	Если Поз1 = 0 И Поз2 = 0 Тогда
		Префикс = ИмяВСистемеСборки;
	ИначеЕсли Поз1 > 1 И Поз2 > 1 Тогда
		Поз = Мин(Поз1, Поз2);
		Префикс = Лев(ИмяВСистемеСборки, Поз-1);
	ИначеЕсли Поз1 > 1 Тогда
		Префикс = Лев(ИмяВСистемеСборки, Поз1-1);
	ИначеЕсли Поз2 > 1 Тогда
		Префикс = Лев(ИмяВСистемеСборки, Поз2-1);
	Иначе	
		Префикс = ИмяВСистемеСборки;
	КонецЕсли;	 
	
	Возврат Префикс;
КонецФункции	 

Процедура УстановитьОтметкуТестЗапускался(ТаблицаТестов,Тест)
	СтрокаТаблицаТестов = ТаблицаТестов.Найти(Тест,"Тест");
	Если СтрокаТаблицаТестов <> Неопределено Тогда
		СтрокаТаблицаТестов.Запускался = Истина;
	КонецЕсли;	 
КонецПроцедуры 

Функция ТаблицаТестовДляЗапуска()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Тест");
	Тзн.Колонки.Добавить("Запускался",Новый ОписаниеТипов("Булево"));
	
	Тзн.Индексы.Добавить("Тест");
	
	Возврат Тзн; 
КонецФункции	 

Функция ОтфильтроватьЗаданияGitLab(ЗапускТестирования, ЗаданияGitLab)
	
	ТаблицаЗаданий = Новый ТаблицаЗначений;
	ТаблицаЗаданий.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(255)));
	ТаблицаЗаданий.Колонки.Добавить("name", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(255)));
	ТаблицаЗаданий.Колонки.Добавить("Завершен", Новый ОписаниеТипов("Булево"));
	
	СтруктураЗаданий = Новый Соответствие;
	
	Счетчик = ЗаданияGitlab.Количество();
	Пока Счетчик > 0 Цикл
		
		Счетчик = Счетчик - 1;
		Задание = ЗаданияGitLab[Счетчик];
		ИдентификаторЗадания = XMLСтрока(Задание.id);
		
		Если СтруктураЗаданий.Получить(Задание.name) <> Неопределено 
			И Число(XMLСтрока(СтруктураЗаданий[Задание.name].id)) >= Число(ИдентификаторЗадания) Тогда
			// Берется только последнее выполненное задание с уникальным именем.
			// Т.е. если джоб перезапускался, то будет взят только последний.
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаданий.Вставить(Задание.name, Задание);
		
		Строка = ТаблицаЗаданий.Добавить();
		Строка.ID = ИдентификаторЗадания;
		Строка.name = Задание.name;
		Строка.Завершен = СтатусGitlabЗавершен(Задание.status);
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаданий.ID КАК ID,
		|	ТаблицаЗаданий.name КАК name
		|ПОМЕСТИТЬ ТаблицаЗаданий
		|ИЗ
		|	&ТаблицаЗаданий КАК ТаблицаЗаданий
		|ГДЕ
		|	ТаблицаЗаданий.Завершен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыВыполненияТестов.НомерЗаданияТестирования КАК НомерЗаданияТестирования
		|ПОМЕСТИТЬ ЗагруженныеИВыполненныеЗадания
		|ИЗ
		|	РегистрСведений.РезультатыВыполненияТестов КАК РезультатыВыполненияТестов
		|ГДЕ
		|	РезультатыВыполненияТестов.ЗапускТестирования = &ЗапускТестирования
		|	И (РезультатыВыполненияТестов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненУспешно)
		|			ИЛИ РезультатыВыполненияТестов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненСОшибкой))
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыВыполненияТестов.НомерЗаданияТестирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаданий.ID КАК ID,
		|	ТаблицаЗаданий.name КАК name
		|ИЗ
		|	ТаблицаЗаданий КАК ТаблицаЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагруженныеИВыполненныеЗадания КАК ЗагруженныеИВыполненныеЗадания
		|		ПО (ЗагруженныеИВыполненныеЗадания.НомерЗаданияТестирования = ТаблицаЗаданий.ID)
		|ГДЕ
		|	ЗагруженныеИВыполненныеЗадания.НомерЗаданияТестирования ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаЗаданий", ТаблицаЗаданий);
	Запрос.УстановитьПараметр("ЗапускТестирования", ЗапускТестирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РезультатЗаданияGitlab = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатЗаданияGitlab.Добавить(СтруктураЗаданий[ВыборкаДетальныеЗаписи.name]);
	КонецЦикла;
	ТаблицаЗаданий = Неопределено;
	СтруктураЗаданий = Неопределено;
	
	Возврат РезультатЗаданияGitlab;
КонецФункции

Процедура ЗагрузитьРезультатыТестовПроекта(ДанныеПроекта, ЗагруженныеВетки=Неопределено)
	Соединение = GitLabСоединение(ДанныеПроекта.АдресСервера);
	Если ЗагруженныеВетки = Неопределено Тогда
		ЗагруженныеВетки = Новый Массив;
	КонецЕсли;
	
	Попытка
		Pipes = ДанныеЗапусковТестированияGitLabВсехВеток(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования. Получение списка запусков тестирования.'"),
						УровеньЖурналаРегистрации.Ошибка,,,
						СтрШаблон(
						НСтр("ru = 'Не удалось загрузить список запусков тестирования проекта: %1.
						| %2.'"), 
						ДанныеПроекта.Проект,
						ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	КешОтветственный = Новый Соответствие;
	КешРазделПроекта = Новый Соответствие;
	ДанныеПроекта.Вставить("КешОтветственный", КешОтветственный);
	ДанныеПроекта.Вставить("КешРазделПроекта", КешРазделПроекта);
	
	Для Каждого Pipe Из Pipes Цикл
		
		Попытка
			ОбработатьДанныеЗапускаТестированияGitLab(Pipe, ДанныеПроекта, Соединение, ЗагруженныеВетки);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.Загрузка запуска сборки'"),
							УровеньЖурналаРегистрации.Ошибка,,,
							СтрШаблон(
							НСтр("ru = 'Не удалось загрузить запуск сборки: %1.
							| %2.'"), 
							Pipe.id,
							ОписаниеОшибки()));
		КонецПопытки;
	КонецЦикла;
	
	ЗакрытьЗапускиТестирования(ДанныеПроекта.Проект);
	
	Соединение = Неопределено;
	Pipes.Очистить();
	
КонецПроцедуры 

Процедура ЗакрытьЗапускиТестирования(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Дата < &Дата
		|	И НЕ ЗапускТестирования.ПометкаУдаления
		|	И ЗапускТестирования.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЗапускТестирования.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 2*24*60*60);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ЗапускТестированияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗапускТестированияОбъект.ДатаЗавершения = ЗапускТестированияОбъект.Дата;
			ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка результатов тестирования.Закрытие документа запуск тестирования",
									УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры 

Функция GitLabСоединение(Сервер)
	
	OpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
	Соединение = Новый HTTPСоединение(Сервер,,,,, 10, OpenSSL);
	
	Возврат Соединение;
	
КонецФункции

Функция ДанныеЗапусковТестированияGitLabВсехВеток(Соединение, Токен, Проект)
	Ответ = Новый Массив;
	Для Сч = 1 По 3 Цикл
		Ресурс = СтрШаблон("/api/v4/projects/%1/pipelines/?order_by=updated_at&page=%2&per_page=100", Проект,Сч);
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, Токен);
		Для Каждого Элем Из ТекущийОтвет Цикл
			Ответ.Добавить(Элем);
		КонецЦикла;	 
	КонецЦикла;	
	
	Возврат Ответ;
КонецФункции	 

Функция GitLabЗапрос(Соединение, Ресурс, Токен, ПолучениеФайла = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = Ресурс;
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	Исключение
		Если ПолучениеФайла Тогда
			// Если возникло исключение при получении файлов, все равно нужно создавать запись.
			// Случается исключение когда артефакты слишком большие для загрузки (например, в них хранятся базы).
			Возврат Неопределено;
		Иначе
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При запросе: %1
			           |Сервер вернул код состояния: %2'"),
			Запрос.АдресРесурса,
			Ответ.КодСостояния);
	КонецЕсли;
	
	Если ПолучениеФайла Тогда
		ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Ответ = Неопределено;
		Возврат ДвоичныеДанные;
	Иначе	
		СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;	 
	
	Запрос = Неопределено;
	
	Возврат СтрокаJSONВСтруктуру(СтрокаJSON, ИменаСвойствСоЗначениямиДата);
	
КонецФункции

Функция СтрокаJSONВСтруктуру(Значение, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Если ИменаСвойствСоЗначениямиДата = Неопределено Тогда
		ИменаСвойствСоЗначениямиДата = Новый Массив;
	КонецЕсли;	 
	ИменаСвойствСоЗначениямиДата.Добавить("created_at");
	ИменаСвойствСоЗначениямиДата.Добавить("ДатаПоследнейПроверки");
	
	Результат = ПрочитатьJSON(ЧтениеJSON,, ИменаСвойствСоЗначениямиДата);
	
	ИменаСвойствДатаНеопределено = Новый Массив;
	ИменаСвойствДатаНеопределено.Добавить("updated_at");
	ИменаСвойствДатаНеопределено.Добавить("finished_at");
	ИменаСвойствДатаНеопределено.Добавить("started_at");
	ИменаСвойствДатаНеопределено.Добавить("artifacts_expire_at");
	
	РезультатМассив = Новый Массив;
	Если Тип("Структура") = ТипЗнч(Результат) Тогда
		РезультатМассив.Добавить(Результат);
	Иначе 
		РезультатМассив = Результат;
	КонецЕсли;
	Для Каждого ЭлементРезультата Из РезультатМассив Цикл
		Если НЕ Тип("Структура") = ТипЗнч(ЭлементРезультата) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Имя Из ИменаСвойствДатаНеопределено Цикл
			Если ЭлементРезультата.Свойство(Имя) 
				И ЭлементРезультата[Имя] <> Неопределено Тогда
				ЭлементРезультата[Имя] = ПрочитатьДатуJSON(ЭлементРезультата[Имя], ФорматДатыJSON.ISO);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИменаСвойствСоЗначениямиДата = Неопределено;
	ИменаСвойствДатаНеопределено = Неопределено;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ЗапускТестированияЗагружен(Знач Pipeline_ID, Знач ДатаЗавершения)
	Pipeline_ID = XMLСтрока(Pipeline_ID);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Pipeline_ID = &Pipeline_ID
		|	И ЗапускТестирования.ДатаЗавершения = &ДатаЗавершения
		|	И ЗапускТестирования.ДатаЗавершения > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ ЗапускТестирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Pipeline_ID", Pipeline_ID);
	Запрос.УстановитьПараметр("ДатаЗавершения", ДатаЗавершения);
	// Если дата завершения в документе не равна переданной дате завершения,
	//  значит запуск тестирования изменился с момента последней загрузки и его нужно загрузить опять.
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнформацияОЗапускеТестированияGitLab(Соединение, Токен, Проект, НомерЗапускТестированияGitLab)
	
	Ресурс = СтрШаблон("/api/v4/projects/%1/pipelines/%2", Проект, Формат(НомерЗапускТестированияGitLab, "ЧГ="));
	
	Ответ = GitLabЗапрос(Соединение, Ресурс, Токен);
	
	Возврат Ответ;
	
КонецФункции

Функция ИнформацияОЗаданияхGitLab(Соединение, Токен, Проект, НомерЗапускТестированияGitLab)
	
	Ответ = Новый Массив;
	Сч = 1;
	Пока Истина Цикл
		Ресурс = СтрШаблон("/api/v4/projects/%1/pipelines/%2/jobs/?page=%3&per_page=100", 
			Проект, Формат(НомерЗапускТестированияGitLab, "ЧГ="), Сч);
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, Токен);
		Если ТекущийОтвет.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		Для Каждого Элем Из ТекущийОтвет Цикл
			Ответ.Добавить(Элем);
		КонецЦикла;
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат Ответ;
КонецФункции

Функция ВеткаСППР(ref, Проект, ВеткаСтрокой)
	
	ИмяВетки = ref;
	
	ВладелецВетки = Неопределено;
	РодительВетки = Неопределено;
	
	Если Лев(ref,2) = "v." И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ref, 3, 1)) Тогда
		ИмяВетки = Сред(ref,3);
		Поз = СтрНайти(ИмяВетки,".",НаправлениеПоиска.СКонца);
		ИмяВетки = Лев(ИмяВетки,Поз-1);
		ВладелецВетки = ВерсияПроектаПоНомеру(ИмяВетки, Проект);
		Если ВладелецВетки = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Версия проекта <%1> не найдена.'"),ИмяВетки);
			КонецЕсли;	 
			
	ИначеЕсли Лев(ref,1) = "v" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ref, 2, 1)) Тогда
		ИмяВетки = Сред(ref,2);
		Поз = СтрНайти(ИмяВетки,".",НаправлениеПоиска.СКонца);
		ИмяВетки = Лев(ИмяВетки,Поз-1);
		
		Пока СтрЧислоВхождений(ИмяВетки,".") > 2 Цикл
			Поз = СтрНайти(ИмяВетки,".",НаправлениеПоиска.СКонца);
			ИмяВетки = Лев(ИмяВетки,Поз-1);
		КонецЦикла;	
		
		ВладелецВетки = ВерсияПроектаПоНомеру(ИмяВетки, Проект);
		Если ВладелецВетки = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Версия проекта <%1> не найдена.'"),ИмяВетки);
		КонецЕсли;	 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецВетки) И ЗначениеЗаполнено(ВладелецВетки.Ветка) Тогда
		Возврат ВладелецВетки.Ветка;
	КонецЕсли; 
	
	ВеткаСтрокой = ИмяВетки;
	Возврат Справочники.Ветки.ВеткаПоИмени(Проект, ИмяВетки);
	
КонецФункции

Функция ВерсияПроектаПоНомеру(НомерВерсии, Проект)
	
	КомпонентыСборки = СтрРазделить(НомерВерсии, ".");
	Если КомпонентыСборки.Количество() >= 3 Тогда
		НомерВерсии = СтрШаблон("%1.%2.%3", КомпонентыСборки[0], КомпонентыСборки[1], КомпонентыСборки[2]);
	КонецЕсли;

	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВерсииПроекта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВерсииПроекта КАК ВерсииПроекта
	               |ГДЕ
	               |	ВерсииПроекта.Владелец = &Проект
	               |	И (ВерсииПроекта.Код = &НомерВерсии
	               |			ИЛИ ВерсииПроекта.ПубликуемыйНомерВерсии = &НомерВерсии)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции 

Функция НовыйЗапускТестирования(Знач НомерЗапускТестированияGitLab, ДатаСоздания, Ветка, ref, Проект, ИмяАвтора="")
	НомерЗапускТестированияGitLab = XMLСтрока(НомерЗапускТестированияGitLab);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Pipeline_ID = &Pipeline_ID
		|	И ЗапускТестирования.Проект = &Проект
		|	И НЕ ЗапускТестирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Pipeline_ID", НомерЗапускТестированияGitLab);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", ИмяАвтора);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Автор = Справочники.Пользователи.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		Автор = Выборка.Ссылка;
	КонецЕсли;
	
	ДокОбъект = Документы.ЗапускТестирования.СоздатьДокумент();
	ДокОбъект.Дата = ДатаСоздания;
	ДокОбъект.Автор = Автор;
	ДокОбъект.Pipeline_ID = НомерЗапускТестированияGitLab;
	ДокОбъект.Проект = Проект;
	ДокОбъект.Ветка = Ветка;
	ДокОбъект.ВеткаСтрокой = ref;
	ДокОбъект.Проведен = Истина;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция АртефактыЗаданияGitLab(Соединение, Токен, Проект, НомерЗапускТестированияGitLab, ЗаданиеGitLab)
	Ресурс = СтрШаблон("/api/v4/projects/%1/jobs/%2/artifacts", Проект, Формат(ИдЗаданияGitlab(ЗаданиеGitLab), "ЧГ="));
	Ответ = GitLabЗапрос(Соединение, Ресурс, Токен, Истина);
	Возврат Ответ;
	
КонецФункции

Функция ДанныеТестаПоУмолчанию(ЗаданиеGitLab = Неопределено, ДатаСборки = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Тест",Неопределено);
	Структура.Вставить("КодСценария",Неопределено);
	Структура.Вставить("UidНастройкиСценария",Неопределено);
	Структура.Вставить("ИмяНастройкиСценария","");
	Структура.Вставить("КодНастройкиСценария",Неопределено);
	Структура.Вставить("КодНастройкиПроцесса",Неопределено);
	Структура.Вставить("Статус",Неопределено);
	Структура.Вставить("Период",Неопределено);
	Структура.Вставить("ИмяТеста",Неопределено);
	Структура.Вставить("ЭлементТеста",Неопределено);
	Структура.Вставить("НомерЗаданияТестирования",Неопределено);
	
	Если ЗаданиеGitLab <> Неопределено Тогда
		Структура.Статус = СтатусТестаПоСтроке(ЗаданиеGitLab.status);
		НомерЗаданияGitLab = XMLСтрока(ЗаданиеGitLab.ID);
		Структура.НомерЗаданияТестирования = СтрЗаменить(НомерЗаданияGitLab, " ", "");
	КонецЕсли;
	Если ДатаСборки <> Неопределено Тогда
		Структура.Период = ДатаСборки;
	КонецЕсли;
	
	Возврат Структура; 
КонецФункции	 

Функция ГруппаТестовПоПрефиксу(Префикс, Проект)
	Если Префикс = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.ПрефиксГруппы = &Префикс
		|	И Тесты.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Префикс", Префикс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции	 

Процедура ЗаписатьРезультатТеста(Ветка, ДанныеТеста, ЗапускТестирования, Проект, ЗаданиеGitLab)
	Если СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "UidНастройкиСценария") Тогда 
		ИмяНастройкиСценария = "";
		Если СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "ИмяНастройкиСценария") Тогда
			ИмяНастройкиСценария = ДанныеТеста.ИмяНастройкиСценария;
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "scenario_setting_name") Тогда
			ИмяНастройкиСценария = ДанныеТеста.scenario_setting_name;
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "имясценария") Тогда
			ИмяНастройкиСценария = ДанныеТеста.имясценария;
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "TestCase") Тогда
			ИмяНастройкиСценария = ДанныеТеста.TestCase;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяНастройкиСценария) Тогда
			ДанныеТеста.Вставить("ЗаданиеGitLab", ЗаданиеGitLab);
			ДанныеТеста.Тест = ТестПоUIDНастройкиСценария(ДанныеТеста, ИмяНастройкиСценария, Проект);
		КонецЕсли;
	КонецЕсли; 
	
	Если ДанныеТеста.Тест = Неопределено Тогда
		Если СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "коднастройкисценария") Тогда
			Тест = НастройкаСценарияПоКоду(ДанныеТеста.коднастройкисценария);
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "коднастройкипроцесса") Тогда
			Тест = НастройкаПроцессаПоКоду(ДанныеТеста.коднастройкипроцесса);
		Иначе
			Тест = Неопределено;
		КонецЕсли;	 
		
		ДанныеТеста.Тест = Тест;
	КонецЕсли;	 
		
	Если ТипЗнч(ДанныеТеста.Тест) = Тип("СправочникСсылка.НастройкиЗапускаСценариев") Тогда
		ДанныеТеста.Тест = ТестПоНастройкеСценария(ДанныеТеста.Тест, Проект, ЗаданиеGitLab);
	ИначеЕсли ТипЗнч(ДанныеТеста.Тест) = Тип("СправочникСсылка.НастройкиЗапускаПроцессов") Тогда
		ДанныеТеста.Тест = ТестПоНастройкеПроцесса(ДанныеТеста.Тест, Проект, ЗаданиеGitLab);
	КонецЕсли; 
	
	Если ДанныеТеста.Тест = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРС = РегистрыСведений.РезультатыВыполненияТестов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРС, ДанныеТеста);
	ЗаписьРС.Ветка = Ветка;
	ЗаписьРС.ЗапускТестирования = ЗапускТестирования;
	ЗаписьРС.Записать(); 
	
КонецПроцедуры 

Функция СборкаВерсииПоТегу(ВеткаСППР,Информация)
	Если  Лев(Информация.ref,1) = "v"
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Информация.ref, 2, 1)) Тогда
		ref = Сред(Информация.ref,2);
		Возврат СборкаВерсииПоПубликуемыйНомерСборки(ВеткаСППР,ref); 
	КонецЕсли;	 
КонецФункции	

Функция НастройкаСценарияПоКоду(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаСценариев.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
		|ГДЕ
		|	НастройкиЗапускаСценариев.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	 

Функция СвойствоЕстьВСтруктуреИОноЗаполнено(СтруктураДляПроверки, ИмяСвойства)
	Возврат СтруктураДляПроверки.Свойство(ИмяСвойства)
		И СтруктураДляПроверки[ИмяСвойства] <> Неопределено
		И СтруктураДляПроверки[ИмяСвойства] <> "";
КонецФункции

Функция НастройкаПроцессаПоКоду(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаПроцессов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЗапускаПроцессов КАК НастройкиЗапускаПроцессов
		|ГДЕ
		|	НастройкиЗапускаПроцессов.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции	 

Функция СборкаВерсииПоПубликуемыйНомерСборки(ВеткаСППР,ПубликуемыйНомерСборки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СборкиВерсии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.ПубликуемыйНомерСборки = &ПубликуемыйНомерСборки
		|	И СборкиВерсии.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ВеткаСППР.Владелец);
	Запрос.УстановитьПараметр("ПубликуемыйНомерСборки", ПубликуемыйНомерСборки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции	 

Функция РаспаковатьАртефактыВоВременныйКаталог(ЧтениеZipФайла, ДвДанныеАртефактов)
	Поток = ДвДанныеАртефактов.ОткрытьПотокДляЧтения();
	
	ЧтениеZipФайла.Открыть(Поток);
	
	ИмяКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяКаталога);
	ЧтениеZipФайла.ИзвлечьВсе(ИмяКаталога,РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ЧтениеZipФайла.Закрыть();
	Поток.Закрыть();
	
	Возврат ИмяКаталога;
КонецФункции	 

Функция ИдЗаданияGitlab(ЗаданиеGitLab)
	Если ЗаданиеGitLab = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ЗаданиеGitLab.id; 
	
КонецФункции	 

Функция ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, Кеш)
	
	Если UIDОтветственного = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	 
	
	Если Кеш <> Неопределено Тогда
		Результат = Кеш[UIDОтветственного];
		Если Результат <> Неопределено Тогда
			Возврат Результат; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	Если UIDОтветственного <> Неопределено И ЗначениеЗаполнено(UIDОтветственного) Тогда
		Попытка
			UID = Новый УникальныйИдентификатор(UIDОтветственного);
			Ответственный = Справочники.Пользователи.ПолучитьСсылку(UID);
			Кеш.Вставить(UIDОтветственного, Ответственный);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования. Не найден ответственный по UID.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'UID <%1>. ИДЗаданияВСистемеСборки: <%2>.'"), 
							UIDОтветственного,
							ИдЗаданияGitlab(ЗаданиеGitLab)));
			Возврат Ответственный;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Процедура ЗаписатьВСтруктуруЗначенияИзXML(Структура, testsuite)
	Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
		Если ДочерниеУзлы_testsuite.ИмяУзла = "properties" Тогда
			Для Каждого property Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
				name = "";
				value = "";
				Для Каждого Атрибут Из property.Атрибуты Цикл
					Если Атрибут.ИмяУзла = "name" Тогда
						name = Атрибут.ЗначениеУзла;
					ИначеЕсли Атрибут.ИмяУзла = "value" Тогда
						value = Атрибут.ЗначениеУзла;
					КонецЕсли;	 
				КонецЦикла;	 
				Если name <> "" Тогда
					Попытка
						Структура.Вставить(ПолучитьИмяСвойстваДляСценарныхТестов(name),value);
					Исключение
						//Возможно запрещенное имя для структуры
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Загрузка результатов тестов. Ошибка при копировании атрибута в структуру.'"),
							УровеньЖурналаРегистрации.Ошибка,,
							Неопределено,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Функция ЭтоОсновнаяВеткаПроекта(Ветка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Тип КАК Тип
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	 

Функция УбратьИзИмениВСистемеСборкиЧисловыеИндексы(Знач Стр)
	
	Стр = УбратьЗначенияРазделенныеКосойЧертой(Стр);
	Стр = УбратьЗначенияРазделенныеДвоеточием(Стр);
	Стр = УбратьЗначенияРазделенныеДвоеточием(Стр);
	Стр = УбратьЗначенияРазделенныеПробелом(Стр);
	Возврат Стр; 
	
КонецФункции	 

Функция УбратьЗначенияРазделенныеКосойЧертой(Знач Стр)
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() >=2 Тогда
		
		ПоследнееЗначение = МассивСтрок[МассивСтрок.Количество() - 1];
		МассивСтрокСлеш = СтрРазделить(ПоследнееЗначение, "/");
		
		Если МассивСтрокСлеш.Количество() = 2 Тогда
			
			Зн1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-1]);
			Зн2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-2]);
			Если Зн1 = Неопределено ИЛИ Зн2 = Неопределено Тогда
				Возврат Стр;
			ИначеЕсли Зн1 = 0 И Зн2 = 0 Тогда
				Возврат Стр;
			КонецЕсли;	 
			
			Возврат СокрЛП(Лев(Стр, СтрДлина(Стр) - СтрДлина(ПоследнееЗначение)));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

Функция УбратьЗначенияРазделенныеДвоеточием(Знач Стр)
	
	Если Прав(Стр, 4) = " 0:0" Тогда
		Возврат Лев(Стр, СтрДлина(Стр) - 4); 
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() >=2 Тогда
		
		ПоследнееЗначение = МассивСтрок[МассивСтрок.Количество() - 1];
		МассивСтрокСлеш = СтрРазделить(ПоследнееЗначение, ":");
		
		Если МассивСтрокСлеш.Количество() = 2 Тогда
			
			Зн1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-1]);
			Зн2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-2]);
			Если Зн1 = Неопределено ИЛИ Зн2 = Неопределено Тогда
				Возврат Стр;
			ИначеЕсли Зн1 = 0 И Зн2 = 0 Тогда
				Возврат Стр;
			КонецЕсли;	 
			
			Возврат СокрЛП(Лев(Стр, СтрДлина(Стр) - СтрДлина(ПоследнееЗначение)));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

Функция УбратьЗначенияРазделенныеПробелом(Знач Стр)
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() >=3 Тогда
		Стр1 = МассивСтрок[МассивСтрок.Количество()-1];
		Стр2 = МассивСтрок[МассивСтрок.Количество()-2];
		Зн1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Стр1);
		Зн2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Стр2);
		Если Зн1 = Неопределено ИЛИ Зн2 = Неопределено Тогда
			Возврат Стр;
		ИначеЕсли Зн1 = 0 И Зн2 = 0 Тогда
			Возврат Стр;
		КонецЕсли;	 
		
		Возврат СокрЛП(Лев(Стр, СтрДлина(Стр) - СтрДлина(Стр1 + " " + Стр2)));
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

#КонецОбласти